"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRowManager = void 0;
var _react = require("react");
var _services = require("../../../services");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License
                                                                                                                                                                                     * 2.0 and the Server Side Public License, v 1; you may not use this file except
                                                                                                                                                                                     * in compliance with, at your election, the Elastic License 2.0 or the Server
                                                                                                                                                                                     * Side Public License, v 1.
                                                                                                                                                                                     */
var useRowManager = function useRowManager(_ref) {
  var innerGridRef = _ref.innerGridRef,
    rowClasses = _ref.rowClasses;
  var rowIdToElements = (0, _react.useRef)(new Map());
  var getRow = (0, _react.useCallback)(function (_ref2) {
    var rowIndex = _ref2.rowIndex,
      visibleRowIndex = _ref2.visibleRowIndex,
      top = _ref2.top,
      height = _ref2.height;
    var rowElement = rowIdToElements.current.get(rowIndex);
    if (rowElement == null) {
      rowElement = document.createElement('div');
      rowElement.setAttribute('role', 'row');
      rowElement.dataset.gridRowIndex = String(rowIndex); // Row index from data, not affected by sorting/pagination
      rowElement.classList.add('euiDataGridRow');
      if (rowClasses !== null && rowClasses !== void 0 && rowClasses[rowIndex]) {
        var _rowElement$classList;
        (_rowElement$classList = rowElement.classList).add.apply(_rowElement$classList, _toConsumableArray(rowClasses[rowIndex].split(' ')));
      }
      rowElement.style.position = 'absolute';
      rowElement.style.left = '0';
      rowElement.style.right = '0';

      // In order for the rowElement's left and right position to correctly inherit
      // from the innerGrid width, we need to make its position relative
      innerGridRef.current.style.position = 'relative';

      // add the element to the grid
      innerGridRef.current.appendChild(rowElement);

      // add the element to the row map
      rowIdToElements.current.set(rowIndex, rowElement);

      // watch the row's children, if they all disappear then remove this row
      var observer = new MutationObserver(function (records) {
        if (records[0].target.childElementCount === 0) {
          var _rowElement;
          observer.disconnect();
          (_rowElement = rowElement) === null || _rowElement === void 0 ? void 0 : _rowElement.remove();
          rowIdToElements.current.delete(rowIndex);
        }
      });
      observer.observe(rowElement, {
        childList: true
      });
    }

    // Ensure the row's visible row index & striping update correctly on sort & pagination
    if (rowElement.dataset.gridVisibleRowIndex !== String(visibleRowIndex)) {
      rowElement.dataset.gridVisibleRowIndex = String(visibleRowIndex);
      var isOddRow = visibleRowIndex % 2 !== 0;
      if (isOddRow) {
        rowElement.classList.add('euiDataGridRow--striped');
      } else {
        rowElement.classList.remove('euiDataGridRow--striped');
      }
    }

    // Ensure that the row's dimensions are always correct by having each cell update position styles
    rowElement.style.top = top;
    rowElement.style.height = "".concat(height, "px");
    return rowElement;
  }, [rowClasses, innerGridRef]);

  // Update row classes dynamically whenever a new prop is passed in
  (0, _services.useUpdateEffect)(function () {
    if (rowClasses) {
      rowIdToElements.current.forEach(function (rowElement, rowIndex) {
        var euiClasses = Array.from(rowElement.classList).filter(function (className) {
          return className.startsWith('euiDataGridRow');
        }).join(' ');
        if (rowClasses[rowIndex]) {
          rowElement.classList.value = "".concat(euiClasses, " ").concat(rowClasses[rowIndex]);
        } else {
          rowElement.classList.value = euiClasses; // Clear any added classes
        }
      });
    }
  }, [rowClasses]);
  return {
    getRow: getRow
  };
};
exports.useRowManager = useRowManager;