import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["items", "className", "wrapperProps"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useContext } from 'react';
import classNames from 'classnames';
import { useEuiTheme, useGeneratedHtmlId } from '../../../services';
import { EuiCollapsibleNavContext } from '../context';
import { EuiCollapsibleNavItem, EuiCollapsibleNavSubItems } from '../collapsible_nav_item/collapsible_nav_item';
import { EuiCollapsedNavPopover } from '../collapsible_nav_item/collapsed/collapsed_nav_popover';
import { euiCollapsibleNavGroupStyles } from './collapsible_nav_group.styles';
import { jsx as ___EmotionJSX } from "@emotion/react";
/**
 * This component should only ever be used as a **top-level component**, and not as a sub-item.
 * It also should **not** be used in the nav footer.
 */
export var EuiCollapsibleNavGroup = function EuiCollapsibleNavGroup(_ref) {
  var items = _ref.items,
    className = _ref.className,
    wrapperProps = _ref.wrapperProps,
    props = _objectWithoutProperties(_ref, _excluded);
  var _useContext = useContext(EuiCollapsibleNavContext),
    isCollapsed = _useContext.isCollapsed,
    isPush = _useContext.isPush;
  var classes = classNames('euiCollapsibleNavGroup', className, wrapperProps === null || wrapperProps === void 0 ? void 0 : wrapperProps.className);
  var euiTheme = useEuiTheme();
  var styles = euiCollapsibleNavGroupStyles(euiTheme);
  var cssStyles = [styles.euiCollapsibleNavGroup, isPush && isCollapsed ? styles.euiCollapsibleNavGroup__title : styles.isWrapper, wrapperProps === null || wrapperProps === void 0 ? void 0 : wrapperProps.css];
  var labelledById = useGeneratedHtmlId();
  return ___EmotionJSX("div", _extends({}, wrapperProps, {
    className: classes,
    css: cssStyles
  }), isCollapsed && isPush ? ___EmotionJSX(EuiCollapsedNavPopover, _extends({
    className: classes,
    items: items
  }, props)) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(EuiCollapsibleNavItem, _extends({
    id: labelledById
  }, props, {
    css: styles.euiCollapsibleNavGroup__title
  })), ___EmotionJSX(EuiCollapsibleNavSubItems, {
    items: items,
    isGroup: true,
    role: "group",
    "aria-labelledby": props.id || labelledById
  })));
};