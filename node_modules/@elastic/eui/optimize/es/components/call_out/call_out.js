import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["title", "color", "size", "iconType", "children", "className", "heading", "onDismiss"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { forwardRef } from 'react';
import classNames from 'classnames';
import { EuiIcon } from '../icon';
import { EuiButtonIcon } from '../button';
import { EuiText } from '../text';
import { useEuiTheme } from '../../services';
import { EuiPanel } from '../panel';
import { EuiSpacer } from '../spacer';
import { EuiTitle } from '../title';
import { EuiI18n } from '../i18n';
import { euiCallOutStyles, euiCallOutHeadingStyles } from './call_out.styles';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var COLORS = ['primary', 'success', 'warning', 'danger'];
export var HEADINGS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p'];
export var EuiCallOut = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var title = _ref.title,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'primary' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'm' : _ref$size,
    iconType = _ref.iconType,
    children = _ref.children,
    className = _ref.className,
    _ref$heading = _ref.heading,
    heading = _ref$heading === void 0 ? 'p' : _ref$heading,
    onDismiss = _ref.onDismiss,
    rest = _objectWithoutProperties(_ref, _excluded);
  var theme = useEuiTheme();
  var styles = euiCallOutStyles(theme);
  var cssStyles = [styles.euiCallOut, onDismiss && styles.hasDismissButton.hasDimissButton, onDismiss && styles.hasDismissButton[size]];
  var cssDismissButtonStyles = [styles.dismissButton.euiCallOut__dismissButton, styles.dismissButton[size]];
  var headerStyles = euiCallOutHeadingStyles(theme);
  var cssHeaderStyles = [headerStyles.euiCallOutHeader, headerStyles[color]];
  var classes = classNames('euiCallOut', _defineProperty({}, "euiCallOut--".concat(color), color), className);
  var dismissButton = onDismiss && ___EmotionJSX(EuiI18n, {
    token: "euiCallOut.dismissAriaLabel",
    default: "Dismiss this callout"
  }, function (dismissAriaLabel) {
    return ___EmotionJSX(EuiButtonIcon, {
      iconType: "cross",
      onClick: onDismiss,
      "aria-label": dismissAriaLabel,
      css: cssDismissButtonStyles,
      color: color,
      "data-test-subj": "euiDismissCalloutButton"
    });
  });
  var headerIcon = iconType && ___EmotionJSX(EuiIcon, {
    css: styles.euiCallOut__icon,
    type: iconType,
    size: "m",
    "aria-hidden": "true",
    color: "inherit"
  });
  var H = heading;
  var header = title && ___EmotionJSX(EuiTitle, {
    size: size === 's' ? 'xxs' : 'xs',
    css: cssHeaderStyles
  }, ___EmotionJSX(H, {
    className: "euiCallOutHeader__title"
  }, headerIcon, title));
  var optionalChildren = children && ___EmotionJSX(EuiText, {
    size: size === 's' ? 'xs' : 's',
    color: "default"
  }, children);

  // Note: the DOM position of the dismiss button matters to screen reader users.
  // We generally want them to have some context of _what_ they're dismissing,
  // instead of navigating to the dismiss button first before the callout content
  var calloutContent = header && optionalChildren ? ___EmotionJSX(React.Fragment, null, header, dismissButton, ___EmotionJSX(EuiSpacer, {
    size: "s"
  }), optionalChildren) : ___EmotionJSX(React.Fragment, null, header || optionalChildren, dismissButton);
  return ___EmotionJSX(EuiPanel, _extends({
    borderRadius: "none",
    color: color,
    css: cssStyles,
    paddingSize: size === 's' ? 's' : 'm',
    className: classes,
    panelRef: ref,
    grow: false
  }, rest), calloutContent);
});
EuiCallOut.displayName = 'EuiCallOut';