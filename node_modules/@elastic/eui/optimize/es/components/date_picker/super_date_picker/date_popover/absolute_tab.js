import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { Component } from 'react';
import moment from 'moment'; // eslint-disable-line import/named

import dateMath from '@elastic/datemath';
import { keys } from '../../../../services';
import { EuiFormRow, EuiFieldText, EuiFormLabel } from '../../../form';
import { EuiCode } from '../../../code';
import { EuiI18n } from '../../../i18n';
import { EuiDatePicker } from '../../date_picker';
import { jsx as ___EmotionJSX } from "@emotion/react";
// Allow users to paste in and have the datepicker parse multiple common date formats,
// in addition to the configured displayed `dateFormat` prop
var ALLOWED_USER_DATE_FORMATS = [moment.ISO_8601, moment.RFC_2822, 'X' // Unix timestamp in seconds
];

export var EuiAbsoluteTab = /*#__PURE__*/function (_Component) {
  _inherits(EuiAbsoluteTab, _Component);
  var _super = _createSuper(EuiAbsoluteTab);
  // Store outside of state as a ref for faster/unbatched updates

  function EuiAbsoluteTab(props) {
    var _this;
    _classCallCheck(this, EuiAbsoluteTab);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "state", void 0);
    _defineProperty(_assertThisInitialized(_this), "isParsing", false);
    _defineProperty(_assertThisInitialized(_this), "handleChange", function (date) {
      var onChange = _this.props.onChange;
      if (date === null) {
        return;
      }
      onChange(date.toISOString());
      var valueAsMoment = moment(date);
      _this.setState({
        valueAsMoment: valueAsMoment,
        textInputValue: valueAsMoment.format(_this.props.dateFormat),
        hasUnparsedText: false,
        isTextInvalid: false
      });
    });
    _defineProperty(_assertThisInitialized(_this), "handleTextChange", function (event) {
      if (_this.isParsing) return;
      _this.setState({
        textInputValue: event.target.value,
        hasUnparsedText: true,
        isTextInvalid: false
      });
    });
    _defineProperty(_assertThisInitialized(_this), "parseUserDateInput", function (textInputValue) {
      _this.isParsing = true;
      // Wait a tick for state to finish updating (whatever gets returned),
      // and then allow `onChange` user input to continue setting state
      requestAnimationFrame(function () {
        _this.isParsing = false;
      });
      var invalidDateState = {
        textInputValue: textInputValue,
        isTextInvalid: true,
        valueAsMoment: null
      };
      if (!textInputValue) {
        return _this.setState(invalidDateState);
      }
      var _this$props = _this.props,
        onChange = _this$props.onChange,
        dateFormat = _this$props.dateFormat;

      // Attempt to parse with passed `dateFormat`
      var valueAsMoment = moment(textInputValue, dateFormat, true);
      var dateIsValid = valueAsMoment.isValid();

      // If not valid, try a few other other standardized formats
      if (!dateIsValid) {
        valueAsMoment = moment(textInputValue, ALLOWED_USER_DATE_FORMATS, true);
        dateIsValid = valueAsMoment.isValid();
      }
      if (dateIsValid) {
        onChange(valueAsMoment.toISOString());
        _this.setState({
          textInputValue: valueAsMoment.format(_this.props.dateFormat),
          valueAsMoment: valueAsMoment,
          hasUnparsedText: false,
          isTextInvalid: false
        });
      } else {
        _this.setState(invalidDateState);
      }
    });
    var parsedValue = dateMath.parse(props.value, {
      roundUp: props.roundUp
    });
    var _valueAsMoment = parsedValue && parsedValue.isValid() ? parsedValue : moment();
    var _textInputValue = _valueAsMoment.locale(_this.props.locale || 'en').format(_this.props.dateFormat);
    _this.state = {
      hasUnparsedText: false,
      isTextInvalid: false,
      textInputValue: _textInputValue,
      valueAsMoment: _valueAsMoment
    };
    return _this;
  }
  _createClass(EuiAbsoluteTab, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props2 = this.props,
        dateFormat = _this$props2.dateFormat,
        timeFormat = _this$props2.timeFormat,
        locale = _this$props2.locale,
        utcOffset = _this$props2.utcOffset,
        labelPrefix = _this$props2.labelPrefix;
      var _this$state = this.state,
        valueAsMoment = _this$state.valueAsMoment,
        isTextInvalid = _this$state.isTextInvalid,
        hasUnparsedText = _this$state.hasUnparsedText,
        textInputValue = _this$state.textInputValue;
      return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(EuiDatePicker, {
        inline: true,
        showTimeSelect: true,
        shadow: false,
        selected: valueAsMoment,
        onChange: this.handleChange,
        dateFormat: dateFormat,
        timeFormat: timeFormat,
        locale: locale,
        utcOffset: utcOffset
      }), ___EmotionJSX(EuiI18n, {
        tokens: ['euiAbsoluteTab.dateFormatHint', 'euiAbsoluteTab.dateFormatError'],
        defaults: ['Press the Enter key to parse as a date.', 'Allowed formats: {dateFormat}, ISO 8601, RFC 2822, or Unix timestamp.'],
        values: {
          dateFormat: ___EmotionJSX(EuiCode, null, dateFormat)
        }
      }, function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          dateFormatHint = _ref2[0],
          dateFormatError = _ref2[1];
        return ___EmotionJSX(EuiFormRow, {
          className: "euiSuperDatePicker__absoluteDateFormRow",
          isInvalid: isTextInvalid,
          error: isTextInvalid ? dateFormatError : undefined,
          helpText: hasUnparsedText ? isTextInvalid ? dateFormatHint : [dateFormatHint, dateFormatError] : undefined
        }, ___EmotionJSX(EuiFieldText, {
          compressed: true,
          isInvalid: isTextInvalid,
          value: textInputValue,
          onChange: _this2.handleTextChange,
          onPaste: function onPaste(event) {
            _this2.parseUserDateInput(event.clipboardData.getData('text'));
          },
          onKeyDown: function onKeyDown(event) {
            if (event.key === keys.ENTER) {
              _this2.parseUserDateInput(textInputValue);
            }
          },
          "data-test-subj": "superDatePickerAbsoluteDateInput",
          prepend: ___EmotionJSX(EuiFormLabel, null, labelPrefix)
        }));
      }));
    }
  }]);
  return EuiAbsoluteTab;
}(Component);