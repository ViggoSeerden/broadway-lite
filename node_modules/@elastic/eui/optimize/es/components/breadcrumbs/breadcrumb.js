import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "className", "type", "truncate"],
  _excluded2 = ["text", "truncate", "type", "href", "rel", "onClick", "popoverContent", "popoverProps", "className", "color", "isFirstBreadcrumb", "isLastBreadcrumb", "isOnlyBreadcrumb", "highlightLastBreadcrumb", "truncateLastBreadcrumb"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useState } from 'react';
import classNames from 'classnames';
import { useEuiTheme } from '../../services';
import { EuiInnerText } from '../inner_text';
import { EuiTextColor } from '../text';
import { EuiLink } from '../link';
import { EuiPopover } from '../popover';
import { EuiIcon } from '../icon';
import { useEuiI18n } from '../i18n';
import { euiBreadcrumbStyles, euiBreadcrumbContentStyles } from './breadcrumb.styles';

// Used internally only by the parent EuiBreadcrumbs
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiBreadcrumb = function EuiBreadcrumb(_ref) {
  var children = _ref.children,
    className = _ref.className,
    type = _ref.type,
    truncate = _ref.truncate,
    rest = _objectWithoutProperties(_ref, _excluded);
  var classes = classNames('euiBreadcrumb', className);
  var euiTheme = useEuiTheme();
  var styles = euiBreadcrumbStyles(euiTheme);
  var cssStyles = [styles.euiBreadcrumb, styles[type], truncate && styles.isTruncated];
  return ___EmotionJSX("li", _extends({
    className: classes,
    css: cssStyles,
    "data-test-subj": "euiBreadcrumb"
  }, rest), children);
};
export var EuiBreadcrumbContent = function EuiBreadcrumbContent(_ref2) {
  var text = _ref2.text,
    truncate = _ref2.truncate,
    type = _ref2.type,
    href = _ref2.href,
    rel = _ref2.rel,
    onClick = _ref2.onClick,
    popoverContent = _ref2.popoverContent,
    popoverProps = _ref2.popoverProps,
    className = _ref2.className,
    color = _ref2.color,
    isFirstBreadcrumb = _ref2.isFirstBreadcrumb,
    isLastBreadcrumb = _ref2.isLastBreadcrumb,
    isOnlyBreadcrumb = _ref2.isOnlyBreadcrumb,
    highlightLastBreadcrumb = _ref2.highlightLastBreadcrumb,
    truncateLastBreadcrumb = _ref2.truncateLastBreadcrumb,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  var classes = classNames('euiBreadcrumb__content', className);
  var euiTheme = useEuiTheme();
  var styles = euiBreadcrumbContentStyles(euiTheme);
  var cssStyles = [styles.euiBreadcrumb__content, styles[type], truncate && !truncateLastBreadcrumb && styles.isTruncated, truncateLastBreadcrumb && styles.isTruncatedLast];
  if (type === 'application') {
    if (isOnlyBreadcrumb) {
      cssStyles.push(styles.applicationStyles.onlyChild);
    } else if (isFirstBreadcrumb) {
      cssStyles.push(styles.applicationStyles.firstChild);
    } else if (isLastBreadcrumb) {
      cssStyles.push(styles.applicationStyles.lastChild);
    }
  }
  var isInteractiveBreadcrumb = href || onClick;
  var linkColor = color || (highlightLastBreadcrumb ? 'text' : 'subdued');
  var plainTextColor = highlightLastBreadcrumb ? 'default' : 'subdued'; // Does not inherit `color` prop
  var ariaCurrent = highlightLastBreadcrumb ? 'page' : undefined;
  var isPopoverBreadcrumb = !!popoverContent;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isPopoverOpen = _useState2[0],
    setIsPopoverOpen = _useState2[1];
  var popoverAriaLabel = useEuiI18n('euiBreadcrumb.popoverAriaLabel', 'Clicking this button will toggle a popover dialog.');
  return ___EmotionJSX(EuiInnerText, null, function (ref, innerText) {
    var title = innerText === '' ? undefined : innerText;
    var baseProps = {
      ref: ref,
      title: title,
      'aria-current': ariaCurrent
    };
    var styleProps = {
      className: classes,
      css: cssStyles
    };
    if (isPopoverBreadcrumb) {
      return ___EmotionJSX(EuiPopover, _extends({}, popoverProps, {
        isOpen: isPopoverOpen,
        closePopover: function closePopover() {
          return setIsPopoverOpen(false);
        },
        css: !isLastBreadcrumb && styles.euiBreadcrumb__popoverWrapper,
        button: ___EmotionJSX(EuiLink, _extends({}, baseProps, {
          color: linkColor,
          css: styles.euiBreadcrumb__popoverButton
          // Avoid passing href and onClick - should only toggle the popover
          ,
          onClick: function onClick() {
            return setIsPopoverOpen(function (isOpen) {
              return !isOpen;
            });
          }
        }, rest), ___EmotionJSX("span", styleProps, text), ___EmotionJSX(EuiIcon, {
          type: "arrowDown",
          size: "s",
          "aria-label": " - ".concat(popoverAriaLabel)
        }))
      }), popoverContent);
    } else if (isInteractiveBreadcrumb) {
      return ___EmotionJSX(EuiLink, _extends({}, baseProps, styleProps, {
        color: linkColor,
        onClick: onClick,
        href: href,
        rel: rel
      }, rest), text);
    } else {
      return ___EmotionJSX(EuiTextColor, {
        color: plainTextColor,
        cloneElement: true
      }, ___EmotionJSX("span", _extends({}, baseProps, styleProps, rest), text));
    }
  });
};
export var EuiBreadcrumbCollapsed = function EuiBreadcrumbCollapsed(_ref3) {
  var children = _ref3.children,
    isFirstBreadcrumb = _ref3.isFirstBreadcrumb,
    type = _ref3.type;
  var euiTheme = useEuiTheme();
  var styles = euiBreadcrumbStyles(euiTheme);
  var cssStyles = [styles.isCollapsed];
  var ariaLabel = useEuiI18n('euiBreadcrumb.collapsedBadge.ariaLabel', 'See collapsed breadcrumbs');
  return ___EmotionJSX(EuiBreadcrumb, {
    css: cssStyles,
    type: type
  }, ___EmotionJSX(EuiBreadcrumbContent, {
    popoverContent: children,
    text: ___EmotionJSX("span", {
      "aria-label": ariaLabel
    }, "\u2026"),
    title: ariaLabel,
    truncate: false,
    isFirstBreadcrumb: isFirstBreadcrumb,
    type: type
  }));
};