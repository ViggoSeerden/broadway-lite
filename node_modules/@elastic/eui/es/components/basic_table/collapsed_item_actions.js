function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useState, useCallback, useMemo } from 'react';
import { isString } from '../../services/predicate';
import { EuiContextMenuItem, EuiContextMenuPanel } from '../context_menu';
import { EuiPopover } from '../popover';
import { EuiButtonIcon } from '../button';
import { EuiToolTip } from '../tool_tip';
import { EuiI18n } from '../i18n';
import { isCustomItemAction, callWithItemIfFunction } from './action_types';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var CollapsedItemActions = function CollapsedItemActions(_ref) {
  var actions = _ref.actions,
    itemId = _ref.itemId,
    item = _ref.item,
    actionsDisabled = _ref.actionsDisabled,
    className = _ref.className;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    popoverOpen = _useState2[0],
    setPopoverOpen = _useState2[1];
  var onClickItem = useCallback(function (onClickAction) {
    setPopoverOpen(false);
    onClickAction === null || onClickAction === void 0 ? void 0 : onClickAction();
  }, []);
  var controls = useMemo(function () {
    return actions.reduce(function (controls, action, index) {
      var _action$available, _action$available2;
      var available = (_action$available = (_action$available2 = action.available) === null || _action$available2 === void 0 ? void 0 : _action$available2.call(action, item)) !== null && _action$available !== void 0 ? _action$available : true;
      if (!available) return controls;
      var enabled = action.enabled == null || action.enabled(item);
      if (isCustomItemAction(action)) {
        var customAction = action;
        var actionControl = customAction.render(item, enabled);
        controls.push(
        // Do not put the `onClick` on the EuiContextMenuItem itself - otherwise
        // it renders a <button> tag instead of a <div>, and we end up with nested
        // interactive elements
        ___EmotionJSX(EuiContextMenuItem, {
          key: index,
          className: "euiBasicTable__collapsedCustomAction"
        }, ___EmotionJSX("span", {
          onClick: function onClick() {
            return onClickItem();
          }
        }, actionControl)));
      } else {
        var buttonIcon = action.icon;
        var icon;
        if (buttonIcon) {
          icon = isString(buttonIcon) ? buttonIcon : buttonIcon(item);
        }
        var buttonContent = callWithItemIfFunction(item)(action.name);
        var toolTipContent = callWithItemIfFunction(item)(action.description);
        var href = callWithItemIfFunction(item)(action.href);
        var dataTestSubj = callWithItemIfFunction(item)(action['data-test-subj']);
        var _onClick = action.onClick,
          target = action.target;
        controls.push(___EmotionJSX(EuiContextMenuItem, {
          key: index,
          className: "euiBasicTable__collapsedAction",
          disabled: !enabled && !actionsDisabled,
          href: href,
          target: target,
          icon: icon,
          "data-test-subj": dataTestSubj,
          onClick: function onClick() {
            return onClickItem(_onClick ? function () {
              return _onClick(item);
            } : undefined);
          },
          toolTipContent: toolTipContent,
          toolTipProps: {
            delay: 'long'
          }
        }, buttonContent));
      }
      return controls;
    }, []);
  }, [actions, actionsDisabled, item, onClickItem]);
  var popoverButton = ___EmotionJSX(EuiI18n, {
    tokens: ['euiCollapsedItemActions.allActions', 'euiCollapsedItemActions.allActionsDisabled'],
    defaults: ['All actions', 'Individual item actions are disabled when rows are being selected.']
  }, function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      allActions = _ref3[0],
      allActionsDisabled = _ref3[1];
    return ___EmotionJSX(EuiButtonIcon, {
      className: className,
      "aria-label": actionsDisabled ? allActionsDisabled : allActions,
      title: actionsDisabled ? allActionsDisabled : undefined,
      iconType: "boxesHorizontal",
      color: "text",
      isDisabled: actionsDisabled,
      onClick: function onClick() {
        return setPopoverOpen(function (isOpen) {
          return !isOpen;
        });
      },
      "data-test-subj": "euiCollapsedItemActionsButton"
    });
  });
  var withTooltip = !actionsDisabled && ___EmotionJSX(EuiI18n, {
    token: "euiCollapsedItemActions.allActions",
    default: "All actions"
  }, function (allActions) {
    return ___EmotionJSX(EuiToolTip, {
      content: allActions,
      delay: "long"
    }, popoverButton);
  });
  return ___EmotionJSX(EuiPopover, {
    className: className,
    id: "".concat(itemId, "-actions"),
    isOpen: popoverOpen,
    button: withTooltip || popoverButton,
    closePopover: function closePopover() {
      return setPopoverOpen(false);
    },
    panelPaddingSize: "none",
    anchorPosition: "leftCenter"
  }, ___EmotionJSX(EuiContextMenuPanel, {
    className: "euiBasicTable__collapsedActions",
    items: controls
  }));
};