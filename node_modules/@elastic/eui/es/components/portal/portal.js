function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * NOTE: We can't test this component because Enzyme doesn't support rendering
 * into portals.
 */

import React, { Component } from 'react';
import PropTypes from "prop-types";
import { createPortal } from 'react-dom';
import { EuiNestedThemeContext } from '../../services';
import { usePropsWithComponentDefaults } from '../provider/component_defaults';
import { jsx as ___EmotionJSX } from "@emotion/react";
var INSERT_POSITIONS = ['after', 'before'];
var insertPositions = {
  after: 'afterend',
  before: 'beforebegin'
};
export var EuiPortal = function EuiPortal(props) {
  var propsWithDefaults = usePropsWithComponentDefaults('EuiPortal', props);
  return ___EmotionJSX(EuiPortalClass, propsWithDefaults);
};
EuiPortal.propTypes = {
  /**
     * ReactNode to render as this component's content
     */
  children: PropTypes.node.isRequired,
  /**
     * If not specified, `EuiPortal` will insert itself
     * into the end of the `document.body` by default
     */
  insert: PropTypes.shape({
    sibling: PropTypes.any.isRequired,
    position: PropTypes.any.isRequired
  }),
  /**
     * Optional ref callback
     */
  portalRef: PropTypes.func
};
export var EuiPortalClass = /*#__PURE__*/function (_Component) {
  _inherits(EuiPortalClass, _Component);
  var _super = _createSuper(EuiPortalClass);
  function EuiPortalClass(props) {
    var _this;
    _classCallCheck(this, EuiPortalClass);
    _this = _super.call(this, props);
    _this.state = {
      portalNode: null
    };
    return _this;
  }
  _createClass(EuiPortalClass, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var insert = this.props.insert;
      var portalNode = document.createElement('div');
      portalNode.dataset.euiportal = 'true';
      if (insert == null) {
        // no insertion defined, append to body
        document.body.appendChild(portalNode);
      } else {
        // inserting before or after an element
        var sibling = insert.sibling,
          position = insert.position;
        sibling.insertAdjacentElement(insertPositions[position], portalNode);
      }
      this.setThemeColor(portalNode);
      this.updatePortalRef(portalNode);

      // Update state with portalNode to intentionally trigger component rerender
      // and call createPortal with correct root element in render()
      this.setState({
        portalNode: portalNode
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var portalNode = this.state.portalNode;
      if (portalNode !== null && portalNode !== void 0 && portalNode.parentNode) {
        portalNode.parentNode.removeChild(portalNode);
      }
      this.updatePortalRef(null);
    }

    // Set the inherited color of the portal based on the wrapping EuiThemeProvider
  }, {
    key: "setThemeColor",
    value: function setThemeColor(portalNode) {
      if (this.context) {
        var _this$context = this.context,
          hasDifferentColorFromGlobalTheme = _this$context.hasDifferentColorFromGlobalTheme,
          colorClassName = _this$context.colorClassName;
        if (hasDifferentColorFromGlobalTheme && this.props.insert == null) {
          portalNode.classList.add(colorClassName);
        }
      }
    }
  }, {
    key: "updatePortalRef",
    value: function updatePortalRef(ref) {
      if (this.props.portalRef) {
        this.props.portalRef(ref);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var portalNode = this.state.portalNode;
      if (!portalNode) {
        return null;
      }
      return /*#__PURE__*/createPortal(this.props.children, portalNode);
    }
  }]);
  return EuiPortalClass;
}(Component);
_defineProperty(EuiPortalClass, "contextType", EuiNestedThemeContext);
EuiPortalClass.propTypes = {
  /**
     * ReactNode to render as this component's content
     */
  children: PropTypes.node.isRequired,
  /**
     * If not specified, `EuiPortal` will insert itself
     * into the end of the `document.body` by default
     */
  insert: PropTypes.shape({
    sibling: PropTypes.any.isRequired,
    position: PropTypes.any.isRequired
  }),
  /**
     * Optional ref callback
     */
  portalRef: PropTypes.func
};