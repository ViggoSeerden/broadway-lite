var _excluded = ["children", "className", "showContent", "controls", "size", "leftOffset", "rightOffset", "maxHeight", "showOnMobile", "style", "position", "bodyClassName", "landmarkHeading"],
  _excluded2 = ["controlType", "id", "color", "label", "className"],
  _excluded3 = ["controlType", "id", "iconType", "className", "color", "onClick", "href"],
  _excluded4 = ["controlType", "id", "text", "className"],
  _excluded5 = ["controlType", "id", "label", "onClick", "className"],
  _excluded6 = ["controlType", "id"];
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import classNames from 'classnames';
import PropTypes from "prop-types";
import React, { Component } from 'react';
import { EuiThemeProvider } from '../../services';
import { EuiScreenReaderOnly } from '../accessibility';
import { EuiBreadcrumbs } from '../breadcrumbs';
import { EuiButton, EuiButtonIcon } from '../button';
import { EuiI18n } from '../i18n';
import { EuiIcon } from '../icon';
import { EuiPortal } from '../portal';

/**
 * Extends EuiButton excluding `size`. Requires `label` as the `children`.
 */

/**
 * Creates a `button` visually styles as a tab.
 * Requires `label` as the `children`.
 * `onClick` must be provided to handle the content swapping.
 */

/**
 * Extends EuiBreadcrumbs
 */

/**
 * Simple div controlling color and size text output.
 * Requires `label` as the `children`.
 */

/**
 * Custom props specific to the icon control type
 */

/**
 * Icon can extend EuiIcon
 * Had to omit `onClick` as it's a valid prop of SVGElement
 * Also omits `type` and `id` as these are also specific to icon control
 */

/**
 * Icon can extend EuiButtonIcon
 * Also omits `iconType` and `id` as these are also specific to icon control
 */

/**
 * @deprecated
 */
import { jsx as ___EmotionJSX } from "@emotion/react";
/**
 * @deprecated - EuiControlBar is scheduled for deprecation due to low internal usage and high
 * overlap with other existing EUI components. We recommend using EuiBottomBar instead,
 * or copying this component into your own application for usage if necessary.
 *
 * The component will be permanently removed in December 2023.
 */
export var EuiControlBar = /*#__PURE__*/function (_Component) {
  _inherits(EuiControlBar, _Component);
  var _super = _createSuper(EuiControlBar);
  function EuiControlBar() {
    var _this;
    _classCallCheck(this, EuiControlBar);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "bar", null);
    _defineProperty(_assertThisInitialized(_this), "state", {
      selectedTab: ''
    });
    return _this;
  }
  _createClass(EuiControlBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.position === 'fixed') {
        var height = this.bar ? this.bar.clientHeight : -1;
        document.body.style.paddingBottom = "".concat(height, "px");
        if (this.props.bodyClassName) {
          document.body.classList.add(this.props.bodyClassName);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.body.style.paddingBottom = '';
      if (this.props.bodyClassName) {
        document.body.classList.remove(this.props.bodyClassName);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        children = _this$props.children,
        className = _this$props.className,
        showContent = _this$props.showContent,
        controls = _this$props.controls,
        size = _this$props.size,
        leftOffset = _this$props.leftOffset,
        rightOffset = _this$props.rightOffset,
        maxHeight = _this$props.maxHeight,
        showOnMobile = _this$props.showOnMobile,
        style = _this$props.style,
        position = _this$props.position,
        bodyClassName = _this$props.bodyClassName,
        landmarkHeading = _this$props.landmarkHeading,
        rest = _objectWithoutProperties(_this$props, _excluded);
      var styles = _objectSpread(_objectSpread({}, style), {}, {
        left: leftOffset,
        right: rightOffset,
        maxHeight: maxHeight
      });
      var classes = classNames('euiControlBar', className, {
        'euiControlBar-isOpen': showContent,
        'euiControlBar--large': size === 'l',
        'euiControlBar--medium': size === 'm',
        'euiControlBar--small': size === 's',
        'euiControlBar--fixed': position === 'fixed',
        'euiControlBar--absolute': position === 'absolute',
        'euiControlBar--relative': position === 'relative',
        'euiControlBar--showOnMobile': showOnMobile
      });
      var handleTabClick = function handleTabClick(control, e) {
        _this2.setState({
          selectedTab: control.id
        }, function () {
          control.onClick(e);
        });
      };
      var controlItem = function controlItem(control, index) {
        switch (control.controlType) {
          case 'button':
            {
              var controlType = control.controlType,
                id = control.id,
                color = control.color,
                label = control.label,
                _className = control.className,
                _rest = _objectWithoutProperties(control, _excluded2);
              return ___EmotionJSX(EuiButton, _extends({
                key: id + index,
                className: classNames('euiControlBar__button', _className),
                color: color
              }, _rest, {
                size: "s"
              }), label);
            }
          case 'icon':
            {
              var _controlType = control.controlType,
                _id = control.id,
                iconType = control.iconType,
                _className2 = control.className,
                _control$color = control.color,
                _color = _control$color === void 0 ? 'text' : _control$color,
                onClick = control.onClick,
                href = control.href,
                _rest2 = _objectWithoutProperties(control, _excluded3);
              return onClick || href ? ___EmotionJSX(EuiButtonIcon, _extends({
                key: _id + index,
                className: classNames('euiControlBar__buttonIcon', _className2),
                onClick: onClick,
                href: href,
                color: _color
              }, _rest2, {
                iconType: iconType
              })) : ___EmotionJSX(EuiIcon, _extends({
                key: _id + index,
                className: classNames('euiControlBar__icon', _className2),
                type: iconType,
                color: _color
              }, _rest2));
            }
          case 'divider':
            return ___EmotionJSX("div", {
              key: control.controlType + index,
              className: "euiControlBar__divider"
            });
          case 'spacer':
            return ___EmotionJSX("div", {
              key: control.controlType + index,
              className: "euiControlBar__spacer"
            });
          case 'text':
            {
              var _controlType2 = control.controlType,
                _id2 = control.id,
                text = control.text,
                _className3 = control.className,
                _rest3 = _objectWithoutProperties(control, _excluded4);
              return ___EmotionJSX("div", _extends({
                key: _id2,
                className: classNames('euiControlBar__text', _className3)
              }, _rest3), text);
            }
          case 'tab':
            {
              var _controlType3 = control.controlType,
                _id3 = control.id,
                _label = control.label,
                _onClick = control.onClick,
                _className4 = control.className,
                _rest4 = _objectWithoutProperties(control, _excluded5);
              var tabClasses = classNames('euiControlBar__tab', {
                'euiControlBar__tab--active': showContent && _id3 === _this2.state.selectedTab
              }, _className4);
              return ___EmotionJSX("button", _extends({
                key: _id3 + index,
                className: tabClasses,
                onClick: function onClick(event) {
                  return handleTabClick(control, event);
                }
              }, _rest4), _label);
            }
          case 'breadcrumbs':
            {
              var _controlType4 = control.controlType,
                _id4 = control.id,
                _rest5 = _objectWithoutProperties(control, _excluded6);
              return ___EmotionJSX(EuiBreadcrumbs, _extends({
                className: "euiControlBar__breadcrumbs",
                key: control.id
              }, _rest5));
            }
        }
      };
      var controlBar = ___EmotionJSX(EuiI18n, {
        token: "euiControlBar.screenReaderHeading",
        default: "Page level controls"
      }, function (screenReaderHeading) {
        return ___EmotionJSX(EuiThemeProvider, {
          colorMode: "dark",
          wrapperProps: {
            cloneElement: true
          }
        }, ___EmotionJSX("section", _extends({
          className: classes
          // Though it would be better to use aria-labelledby than aria-label
          // and not repeat the same string twice, a bug in voiceover won't list
          // some landmarks in the rotor without an aria-label
          ,
          "aria-label": landmarkHeading ? landmarkHeading : screenReaderHeading
        }, rest, {
          style: styles
        }), ___EmotionJSX(EuiScreenReaderOnly, null, ___EmotionJSX("h2", null, landmarkHeading ? landmarkHeading : screenReaderHeading)), ___EmotionJSX("div", {
          className: "euiControlBar__controls",
          ref: function ref(node) {
            _this2.bar = node;
          }
        }, controls.map(function (control, index) {
          return controlItem(control, index);
        })), _this2.props.showContent ? ___EmotionJSX("div", {
          className: "euiControlBar__content"
        }, children) : null));
      });
      return position === 'fixed' ? ___EmotionJSX(EuiPortal, null, controlBar, ___EmotionJSX(EuiScreenReaderOnly, null, ___EmotionJSX("p", {
        "aria-live": "assertive"
      }, landmarkHeading ? ___EmotionJSX(EuiI18n, {
        token: "euiControlBar.customScreenReaderAnnouncement",
        default: "There is a new region landmark called {landmarkHeading} with page level controls at the end of the document.",
        values: {
          landmarkHeading: landmarkHeading
        }
      }) : ___EmotionJSX(EuiI18n, {
        token: "euiControlBar.screenReaderAnnouncement",
        default: "There is a new region landmark with page level controls at the end of the document."
      })))) : controlBar;
    }
  }]);
  return EuiControlBar;
}(Component);
_defineProperty(EuiControlBar, "defaultProps", {
  leftOffset: 0,
  rightOffset: 0,
  position: 'fixed',
  size: 'l',
  showContent: false,
  showOnMobile: false
});
EuiControlBar.propTypes = {
  className: PropTypes.string,
  "aria-label": PropTypes.string,
  "data-test-subj": PropTypes.string,
  css: PropTypes.any,
  /**
       * Show or hide the content area containing the `children`
       */
  showContent: PropTypes.bool,
  /**
       * An array of controls, actions, and layout spacers to display.
       * Accepts `'button' | 'tab' | 'breadcrumbs' | 'text' | 'icon' | 'spacer' | 'divider'`
       */
  controls: PropTypes.arrayOf(PropTypes.shape({
    href: PropTypes.string,
    onClick: PropTypes.func,
    id: PropTypes.string,
    label: PropTypes.oneOfType([PropTypes.node.isRequired, PropTypes.node]),
    buttonRef: PropTypes.any,
    controlType: PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.oneOf(["button"]).isRequired, PropTypes.oneOfType([PropTypes.oneOf(["breadcrumbs"]).isRequired, PropTypes.oneOf(["tab"]).isRequired]).isRequired]).isRequired, PropTypes.oneOf(["text"]).isRequired]).isRequired, PropTypes.oneOf(["icon"]).isRequired]).isRequired, PropTypes.oneOf(["divider"]).isRequired]).isRequired, PropTypes.oneOf(["spacer"]).isRequired]).isRequired,
    className: PropTypes.string,
    "aria-label": PropTypes.string,
    "data-test-subj": PropTypes.string,
    css: PropTypes.any,
    /**
       * Hides extra (above the max) breadcrumbs under a collapsed item as the window gets smaller.
       * Pass a custom #EuiBreadcrumbResponsiveMaxCount object to change the number of breadcrumbs to show at the particular breakpoints.
       *
       * Pass `false` to turn this behavior off.
       *
       * Default: `{ xs: 1, s: 2, m: 4 }`
       */
    responsive: PropTypes.oneOfType([PropTypes.bool.isRequired, PropTypes.any.isRequired]),
    /**
       * Forces all breadcrumbs to single line and
       * truncates each breadcrumb to a particular width,
       * except for the last item
       */
    truncate: PropTypes.bool,
    /**
       * Collapses the inner items past the maximum set here
       * into a single ellipses item.
       * Omitting or passing a `0` value will show all breadcrumbs.
       */
    max: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.oneOf([null])]),
    /**
       * The array of individual #EuiBreadcrumb items
       */
    breadcrumbs: PropTypes.arrayOf(PropTypes.shape({
      className: PropTypes.string,
      "aria-label": PropTypes.string,
      "data-test-subj": PropTypes.string,
      css: PropTypes.any,
      href: PropTypes.string,
      rel: PropTypes.string,
      onClick: PropTypes.func,
      /**
           * Visible label of the breadcrumb
           */
      text: PropTypes.node.isRequired,
      /**
           * Force a max-width on the breadcrumb text
           */
      truncate: PropTypes.bool,
      /**
           * Accepts any EuiLink `color` when rendered as one (has `href`, `onClick`, or `popoverContent`)
           */
      color: PropTypes.any,
      /**
           * Override the existing `aria-current` which defaults to `page` for the last breadcrumb
           */
      "aria-current": PropTypes.any,
      /**
           * Creates a breadcrumb that toggles a popover dialog
           *
           * If passed, both `href` and `onClick` will be ignored - the breadcrumb's
           * click behavior should only trigger a popover.
           */
      popoverContent: PropTypes.node,
      /**
           * Allows customizing the popover if necessary. Accepts any props that
           * [EuiPopover](/#/layout/popover) accepts, except for props that control state.
           */
      popoverProps: PropTypes.shape({
        /**
           * Class name passed to the direct parent of the button
           *
           * @deprecated Use `className` instead
           */
        anchorClassName: PropTypes.string,
        /**
           * Alignment of the popover and arrow relative to the button
           */
        anchorPosition: PropTypes.any,
        /**
           * Style and position alteration for arrow-less attachment.
           * Intended for use with inputs as anchors, e.g. EuiInputPopover
           */
        attachToAnchor: PropTypes.bool,
        /**
           * @deprecated Use `popoverRef` instead
           */
        buttonRef: PropTypes.any,
        /**
           * Restrict the popover's position within this element
           */
        container: PropTypes.any,
        /**
           * CSS display type for both the popover and anchor
           */
        display: PropTypes.any,
        /**
           * Object of props passed to EuiFocusTrap
           */
        focusTrapProps: PropTypes.any,
        /**
           * Show arrow indicating to originating button
           */
        hasArrow: PropTypes.bool,
        /**
           * Specifies what element should initially have focus; Can be a DOM
           * node, or a selector string (which will be passed to
           * document.querySelector() to find the DOM node), or a function that
           * returns a DOM node.
           *
           * If not passed, initial focus defaults to the popover panel.
           */
        initialFocus: PropTypes.any,
        /**
           * Passed directly to EuiPortal for DOM positioning. Both properties are
           * required if prop is specified
           */
        insert: PropTypes.shape({
          sibling: PropTypes.any.isRequired,
          position: PropTypes.oneOf(["before", "after"]).isRequired
        }),
        /**
           * Traps tab focus within the popover contents
           */
        ownFocus: PropTypes.bool,
        /**
           * Custom class added to the EuiPanel containing the popover contents
           */
        panelClassName: PropTypes.string,
        /**
           * EuiPanel padding on all sides
           */
        panelPaddingSize: PropTypes.any,
        /**
           * Standard DOM `style` attribute. Passed to the EuiPanel
           */
        panelStyle: PropTypes.any,
        /**
           * Object of props passed to EuiPanel. See #EuiPopoverPanelProps
           */
        panelProps: PropTypes.shape({
          element: PropTypes.oneOf(["div"]),
          /**
             * Padding for all four sides
             */
          paddingSize: PropTypes.any,
          /**
             * Corner border radius
             */
          borderRadius: PropTypes.any,
          /**
             * When true the panel will grow in height to match `EuiFlexItem`
             */
          grow: PropTypes.bool,
          panelRef: PropTypes.any,
          className: PropTypes.string,
          "aria-label": PropTypes.string,
          "data-test-subj": PropTypes.string,
          css: PropTypes.any
        }),
        panelRef: PropTypes.any,
        /**
           * Optional screen reader instructions to announce upon popover open,
           * in addition to EUI's default popover instructions for Escape on close.
           * Useful for popovers that may have additional keyboard capabilities such as
           * arrow navigation.
           */
        popoverScreenReaderText: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.node.isRequired]),
        popoverRef: PropTypes.any,
        /**
           * When `true`, the popover's position is re-calculated when the user
           * scrolls, this supports having fixed-position popover anchors. When nesting
           * an `EuiPopover` in a scrollable container, `repositionOnScroll` should be `true`
           */
        repositionOnScroll: PropTypes.bool,
        /**
           * By default, popovers will attempt to position themselves along the initial
           * axis specified. If there is not enough room either vertically or horizontally
           * however, the popover will attempt to reposition itself along the secondary
           * cross axis if there is room there instead.
           *
           * If you do not not want this repositioning to occur (and it is acceptable for
           * the popover to appear offscreen), set this to false to disable this behavior.
           *
           * @default true
           */
        repositionToCrossAxis: PropTypes.bool,
        /**
           * Must be set to true if using `EuiDragDropContext` within a popover,
           * otherwise your nested drag & drop will have incorrect positioning
           */
        hasDragDrop: PropTypes.bool,
        /**
           * By default, popover content inherits the z-index of the anchor
           * component; pass `zIndex` to override
           */
        zIndex: PropTypes.number,
        /**
           * Distance away from the anchor that the popover will render
           */
        offset: PropTypes.number,
        /**
           * Minimum distance between the popover and the bounding container;
           * Pass an array of 4 values to adjust each side differently: `[top, right, bottom, left]`
           * Default is 16
           */
        buffer: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.any.isRequired]),
        /**
           * Element to pass as the child element of the arrow;
           * Use case is typically limited to an accompanying `EuiBeacon`
           */
        arrowChildren: PropTypes.node,
        /**
           * Provide a name to the popover panel
           */
        "aria-label": PropTypes.string,
        /**
           * Alternative option to `aria-label` that takes an `id`.
           * Usually takes the `id` of the popover title
           */
        "aria-labelledby": PropTypes.string,
        /**
           * Function callback for when the popover positon changes
           */
        onPositionChange: PropTypes.func,
        className: PropTypes.string,
        "data-test-subj": PropTypes.string,
        css: PropTypes.any
      })
    }).isRequired),
    /**
       * Determines breadcrumbs appearance, with `page` being the default styling.
       * Application breadcrumbs should only be once per page, in (e.g.) EuiHeader
       */
    type: PropTypes.oneOf(["page", "application"]),
    /**
       * Whether the last breadcrumb should visually (and accessibly, to screen readers)
       * be highlighted as the current page. Defaults to true.
       */
    lastBreadcrumbIsCurrentPage: PropTypes.bool,
    text: PropTypes.node,
    iconType: PropTypes.string
  }).isRequired).isRequired,
  /**
       * The default height of the content area.
       */
  size: PropTypes.oneOf(["s", "m", "l"]),
  /**
       * Customize the max height.
       * Best when used with `size=l` as this will ensure the actual height equals the max height set.
       */
  maxHeight: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired]),
  /**
       * Set the offset from the left side of the screen.
       */
  leftOffset: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired]),
  /**
       * Set the offset from the left side of the screen.
       */
  rightOffset: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired]),
  /**
       * The control bar is hidden on mobile by default. Use the `showOnMobile` prop to force it's display on mobile screens.
       * You'll need to ensure that the content you place into the bar renders as expected on mobile.
       */
  showOnMobile: PropTypes.bool,
  /**
       * By default EuiControlBar will live in a portal, fixed position to the browser window.
       * Change the position of the bar to live inside a container and be positioned against its parent.
       */
  position: PropTypes.oneOf(["fixed", "relative", "absolute"]),
  /**
       * Optional class applied to the body used when `position = fixed`
       */
  bodyClassName: PropTypes.string,
  /**
       * Customize the screen reader heading that helps users find this control. Default is "Page level controls".
       */
  landmarkHeading: PropTypes.string
};