{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport visit from 'unist-util-visit';\nexport function euiMarkdownLinkValidator(options) {\n  return function (ast) {\n    visit(ast, 'link', function (_node) {\n      var node = _node;\n      if (!validateUrl(node.url, options)) {\n        mutateLinkToText(node);\n      }\n    });\n  };\n}\nexport function mutateLinkToText(node) {\n  var _node$children, _node$children$, _node$url;\n  // this is an upsupported url, convert to a text node\n  node.type = 'text';\n\n  // and, if the link text matches the url there's only one value to show\n  // otherwise render as the markdown syntax so both text & url remain, unlinked\n  var linkText = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : (_node$children$ = _node$children[0]) === null || _node$children$ === void 0 ? void 0 : _node$children$.value) || '';\n  var linkUrl = (_node$url = node.url) !== null && _node$url !== void 0 ? _node$url : '';\n  if (linkText === linkUrl) {\n    node.value = linkText;\n  } else {\n    node.value = \"[\".concat(linkText, \"](\").concat(node.url, \")\");\n  }\n  delete node.children;\n  delete node.title;\n  delete node.url;\n  return node;\n}\nexport function validateUrl(url, _ref) {\n  var allowRelative = _ref.allowRelative,\n    allowProtocols = _ref.allowProtocols;\n  // relative captures both relative paths `/` and protocols `//`\n  var isRelative = url.startsWith('/');\n  if (isRelative) {\n    return allowRelative;\n  }\n  try {\n    var parsedUrl = new URL(url);\n    return allowProtocols.indexOf(parsedUrl.protocol) !== -1;\n  } catch (e) {\n    // failed to parse input as url\n    return false;\n  }\n}","map":{"version":3,"names":["visit","euiMarkdownLinkValidator","options","ast","_node","node","validateUrl","url","mutateLinkToText","_node$children","_node$children$","_node$url","type","linkText","children","value","linkUrl","concat","title","_ref","allowRelative","allowProtocols","isRelative","startsWith","parsedUrl","URL","indexOf","protocol","e"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/components/markdown_editor/plugins/markdown_link_validator.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport visit from 'unist-util-visit';\nexport function euiMarkdownLinkValidator(options) {\n  return function (ast) {\n    visit(ast, 'link', function (_node) {\n      var node = _node;\n      if (!validateUrl(node.url, options)) {\n        mutateLinkToText(node);\n      }\n    });\n  };\n}\nexport function mutateLinkToText(node) {\n  var _node$children, _node$children$, _node$url;\n  // this is an upsupported url, convert to a text node\n  node.type = 'text';\n\n  // and, if the link text matches the url there's only one value to show\n  // otherwise render as the markdown syntax so both text & url remain, unlinked\n  var linkText = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : (_node$children$ = _node$children[0]) === null || _node$children$ === void 0 ? void 0 : _node$children$.value) || '';\n  var linkUrl = (_node$url = node.url) !== null && _node$url !== void 0 ? _node$url : '';\n  if (linkText === linkUrl) {\n    node.value = linkText;\n  } else {\n    node.value = \"[\".concat(linkText, \"](\").concat(node.url, \")\");\n  }\n  delete node.children;\n  delete node.title;\n  delete node.url;\n  return node;\n}\nexport function validateUrl(url, _ref) {\n  var allowRelative = _ref.allowRelative,\n    allowProtocols = _ref.allowProtocols;\n  // relative captures both relative paths `/` and protocols `//`\n  var isRelative = url.startsWith('/');\n  if (isRelative) {\n    return allowRelative;\n  }\n  try {\n    var parsedUrl = new URL(url);\n    return allowProtocols.indexOf(parsedUrl.protocol) !== -1;\n  } catch (e) {\n    // failed to parse input as url\n    return false;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,OAAO,SAASC,wBAAwBA,CAACC,OAAO,EAAE;EAChD,OAAO,UAAUC,GAAG,EAAE;IACpBH,KAAK,CAACG,GAAG,EAAE,MAAM,EAAE,UAAUC,KAAK,EAAE;MAClC,IAAIC,IAAI,GAAGD,KAAK;MAChB,IAAI,CAACE,WAAW,CAACD,IAAI,CAACE,GAAG,EAAEL,OAAO,CAAC,EAAE;QACnCM,gBAAgB,CAACH,IAAI,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC;AACH;AACA,OAAO,SAASG,gBAAgBA,CAACH,IAAI,EAAE;EACrC,IAAII,cAAc,EAAEC,eAAe,EAAEC,SAAS;EAC9C;EACAN,IAAI,CAACO,IAAI,GAAG,MAAM;;EAElB;EACA;EACA,IAAIC,QAAQ,GAAG,CAAC,CAACJ,cAAc,GAAGJ,IAAI,CAACS,QAAQ,MAAM,IAAI,IAAIL,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACC,eAAe,GAAGD,cAAc,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIC,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACK,KAAK,KAAK,EAAE;EACtN,IAAIC,OAAO,GAAG,CAACL,SAAS,GAAGN,IAAI,CAACE,GAAG,MAAM,IAAI,IAAII,SAAS,KAAK,KAAK,CAAC,GAAGA,SAAS,GAAG,EAAE;EACtF,IAAIE,QAAQ,KAAKG,OAAO,EAAE;IACxBX,IAAI,CAACU,KAAK,GAAGF,QAAQ;EACvB,CAAC,MAAM;IACLR,IAAI,CAACU,KAAK,GAAG,GAAG,CAACE,MAAM,CAACJ,QAAQ,EAAE,IAAI,CAAC,CAACI,MAAM,CAACZ,IAAI,CAACE,GAAG,EAAE,GAAG,CAAC;EAC/D;EACA,OAAOF,IAAI,CAACS,QAAQ;EACpB,OAAOT,IAAI,CAACa,KAAK;EACjB,OAAOb,IAAI,CAACE,GAAG;EACf,OAAOF,IAAI;AACb;AACA,OAAO,SAASC,WAAWA,CAACC,GAAG,EAAEY,IAAI,EAAE;EACrC,IAAIC,aAAa,GAAGD,IAAI,CAACC,aAAa;IACpCC,cAAc,GAAGF,IAAI,CAACE,cAAc;EACtC;EACA,IAAIC,UAAU,GAAGf,GAAG,CAACgB,UAAU,CAAC,GAAG,CAAC;EACpC,IAAID,UAAU,EAAE;IACd,OAAOF,aAAa;EACtB;EACA,IAAI;IACF,IAAII,SAAS,GAAG,IAAIC,GAAG,CAAClB,GAAG,CAAC;IAC5B,OAAOc,cAAc,CAACK,OAAO,CAACF,SAAS,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACA,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}