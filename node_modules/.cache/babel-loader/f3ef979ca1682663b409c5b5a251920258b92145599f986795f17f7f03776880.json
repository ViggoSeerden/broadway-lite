{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { isNil, isArray, isBoolean, isDate, isNaN, isNumber, isString } from '../predicate';\nimport { formatBoolean } from './format_boolean';\nimport { formatDate } from './format_date';\nimport { formatNumber } from './format_number';\nimport { formatText } from './format_text';\nexport var formatAuto = function formatAuto(value) {\n  if (isNil(value) || isNaN(value)) {\n    return '';\n  }\n  if (isString(value)) {\n    return formatText(value);\n  }\n  if (isDate(value)) {\n    return formatDate(value);\n  }\n  if (isBoolean(value)) {\n    return formatBoolean(value);\n  }\n  if (isNumber(value)) {\n    return formatNumber(value);\n  }\n  if (isArray(value)) {\n    return Array.isArray(value) ? value.map(function (item) {\n      return formatAuto(item);\n    }).join(', ') : formatAuto(value);\n  }\n\n  // TODO not sure if we want that.. the (+) is that we show something, the (-) is that it's very technical\n  return JSON.stringify(value);\n};","map":{"version":3,"names":["isNil","isArray","isBoolean","isDate","isNaN","isNumber","isString","formatBoolean","formatDate","formatNumber","formatText","formatAuto","value","Array","map","item","join","JSON","stringify"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/services/format/format_auto.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { isNil, isArray, isBoolean, isDate, isNaN, isNumber, isString } from '../predicate';\nimport { formatBoolean } from './format_boolean';\nimport { formatDate } from './format_date';\nimport { formatNumber } from './format_number';\nimport { formatText } from './format_text';\nexport var formatAuto = function formatAuto(value) {\n  if (isNil(value) || isNaN(value)) {\n    return '';\n  }\n  if (isString(value)) {\n    return formatText(value);\n  }\n  if (isDate(value)) {\n    return formatDate(value);\n  }\n  if (isBoolean(value)) {\n    return formatBoolean(value);\n  }\n  if (isNumber(value)) {\n    return formatNumber(value);\n  }\n  if (isArray(value)) {\n    return Array.isArray(value) ? value.map(function (item) {\n      return formatAuto(item);\n    }).join(', ') : formatAuto(value);\n  }\n\n  // TODO not sure if we want that.. the (+) is that we show something, the (-) is that it's very technical\n  return JSON.stringify(value);\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,KAAK,EAAEC,OAAO,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,cAAc;AAC3F,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAO,IAAIC,UAAU,GAAG,SAASA,UAAUA,CAACC,KAAK,EAAE;EACjD,IAAIZ,KAAK,CAACY,KAAK,CAAC,IAAIR,KAAK,CAACQ,KAAK,CAAC,EAAE;IAChC,OAAO,EAAE;EACX;EACA,IAAIN,QAAQ,CAACM,KAAK,CAAC,EAAE;IACnB,OAAOF,UAAU,CAACE,KAAK,CAAC;EAC1B;EACA,IAAIT,MAAM,CAACS,KAAK,CAAC,EAAE;IACjB,OAAOJ,UAAU,CAACI,KAAK,CAAC;EAC1B;EACA,IAAIV,SAAS,CAACU,KAAK,CAAC,EAAE;IACpB,OAAOL,aAAa,CAACK,KAAK,CAAC;EAC7B;EACA,IAAIP,QAAQ,CAACO,KAAK,CAAC,EAAE;IACnB,OAAOH,YAAY,CAACG,KAAK,CAAC;EAC5B;EACA,IAAIX,OAAO,CAACW,KAAK,CAAC,EAAE;IAClB,OAAOC,KAAK,CAACZ,OAAO,CAACW,KAAK,CAAC,GAAGA,KAAK,CAACE,GAAG,CAAC,UAAUC,IAAI,EAAE;MACtD,OAAOJ,UAAU,CAACI,IAAI,CAAC;IACzB,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,GAAGL,UAAU,CAACC,KAAK,CAAC;EACnC;;EAEA;EACA,OAAOK,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}