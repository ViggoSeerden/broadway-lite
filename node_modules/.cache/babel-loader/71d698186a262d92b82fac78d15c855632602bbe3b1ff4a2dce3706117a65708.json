{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { sortMapBySmallToLargeValues } from '../../services/breakpoint/_sorting';\nimport { useEuiTheme } from '../../services/theme/hooks';\n/**\n * Generates a CSS media query rule string based on the input breakpoint *ranges*.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['s']) becomes `@media only screen and (min-width: 575px) and (max-width: 767px)`\n * euiBreakpoint(['s', 'l']) becomes `@media only screen and (min-width: 575px) and (max-width: 1199px)`\n *\n * Use the smallest and largest sizes to generate media queries with only min/max-width.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['xs', 'm']) becomes `@media only screen and (max-width: 991px)`\n * euiBreakpoint(['l', 'xl']) becomes `@media only screen and (min-width: 992px)`\n */\nexport var euiBreakpoint = function euiBreakpoint(_ref, sizes) {\n  var euiTheme = _ref.euiTheme;\n  // Ensure we inherit any theme breakpoint overrides & sort by small to large\n  var orderedBreakpoints = Object.keys(sortMapBySmallToLargeValues(euiTheme.breakpoint));\n\n  // Ensure the sizes array is in the correct ascending size order\n  var orderedSizes = sizes.sort(function (a, b) {\n    return orderedBreakpoints.indexOf(a) - orderedBreakpoints.indexOf(b);\n  });\n  var firstBreakpoint = orderedSizes[0];\n  var minBreakpointSize = euiTheme.breakpoint[firstBreakpoint];\n  var lastBreakpoint = orderedSizes[sizes.length - 1];\n  var maxBreakpointSize;\n\n  // To get the correct screen range, we set the max-width to the next breakpoint\n  // size in the sizes array (unless the size is already the largest breakpoint)\n  if (lastBreakpoint !== orderedBreakpoints[orderedBreakpoints.length - 1]) {\n    var nextBreakpoint = orderedBreakpoints.indexOf(lastBreakpoint) + 1;\n    maxBreakpointSize = euiTheme.breakpoint[orderedBreakpoints[nextBreakpoint]];\n  }\n  return ['@media only screen', minBreakpointSize ? \"(min-width: \".concat(minBreakpointSize, \"px)\") : false,\n  // If 0, don't render a min-width\n  maxBreakpointSize ? \"(max-width: \".concat(maxBreakpointSize - 1, \"px)\") : false // If undefined, don't render a max-width\n  ].filter(Boolean).join(' and ');\n};\nexport var useEuiBreakpoint = function useEuiBreakpoint(sizes) {\n  var euiTheme = useEuiTheme();\n  return euiBreakpoint(euiTheme, sizes);\n};\n\n/**\n * Min/Max width breakpoint utilities that generate only a single min/max query/bound\n *\n * *Unlike the above euiBreakpoint utility*, these utilities treat breakpoint\n * sizes as a one-dimensional point, rather than a two-dimensional *screen range*.\n * Examples with default theme breakpoints:\n *\n * euiMaxBreakpoint('m') becomes `@media only screen and (max-width: 767px)`\n * euiMinBreakpoint('m') becomes `@media only screen and (min-width: 768px)`\n *\n * This is safer and more intentional to use than euiBreakpoint(['xs', 's']) / euiBreakpoint(['m', 'xl'])\n * in the event that consumers add larger or smaller custom breakpoints (e.g 'xxs' or `xxl`)\n * and if the intention of the media query is actually \"m and below/above\" vs. \"only screens m/l/xl\".\n */\n\nexport var euiMinBreakpoint = function euiMinBreakpoint(_ref2, size) {\n  var euiTheme = _ref2.euiTheme;\n  var minBreakpointSize = euiTheme.breakpoint[size];\n  if (minBreakpointSize) {\n    return \"@media only screen and (min-width: \".concat(minBreakpointSize, \"px)\");\n  } else {\n    console.warn(\"Invalid min breakpoint size: \".concat(size));\n    return '@media only screen';\n  }\n};\nexport var useEuiMinBreakpoint = function useEuiMinBreakpoint(size) {\n  var euiTheme = useEuiTheme();\n  return euiMinBreakpoint(euiTheme, size);\n};\nexport var euiMaxBreakpoint = function euiMaxBreakpoint(_ref3, size) {\n  var euiTheme = _ref3.euiTheme;\n  var maxBreakpointSize = euiTheme.breakpoint[size];\n  if (maxBreakpointSize) {\n    return \"@media only screen and (max-width: \".concat(maxBreakpointSize - 1, \"px)\");\n  } else {\n    console.warn(\"Invalid max breakpoint size: \".concat(size));\n    return '@media only screen';\n  }\n};\nexport var useEuiMaxBreakpoint = function useEuiMaxBreakpoint(size) {\n  var euiTheme = useEuiTheme();\n  return euiMaxBreakpoint(euiTheme, size);\n};","map":{"version":3,"names":["sortMapBySmallToLargeValues","useEuiTheme","euiBreakpoint","_ref","sizes","euiTheme","orderedBreakpoints","Object","keys","breakpoint","orderedSizes","sort","a","b","indexOf","firstBreakpoint","minBreakpointSize","lastBreakpoint","length","maxBreakpointSize","nextBreakpoint","concat","filter","Boolean","join","useEuiBreakpoint","euiMinBreakpoint","_ref2","size","console","warn","useEuiMinBreakpoint","euiMaxBreakpoint","_ref3","useEuiMaxBreakpoint"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/global_styling/mixins/_responsive.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { sortMapBySmallToLargeValues } from '../../services/breakpoint/_sorting';\nimport { useEuiTheme } from '../../services/theme/hooks';\n/**\n * Generates a CSS media query rule string based on the input breakpoint *ranges*.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['s']) becomes `@media only screen and (min-width: 575px) and (max-width: 767px)`\n * euiBreakpoint(['s', 'l']) becomes `@media only screen and (min-width: 575px) and (max-width: 1199px)`\n *\n * Use the smallest and largest sizes to generate media queries with only min/max-width.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['xs', 'm']) becomes `@media only screen and (max-width: 991px)`\n * euiBreakpoint(['l', 'xl']) becomes `@media only screen and (min-width: 992px)`\n */\nexport var euiBreakpoint = function euiBreakpoint(_ref, sizes) {\n  var euiTheme = _ref.euiTheme;\n  // Ensure we inherit any theme breakpoint overrides & sort by small to large\n  var orderedBreakpoints = Object.keys(sortMapBySmallToLargeValues(euiTheme.breakpoint));\n\n  // Ensure the sizes array is in the correct ascending size order\n  var orderedSizes = sizes.sort(function (a, b) {\n    return orderedBreakpoints.indexOf(a) - orderedBreakpoints.indexOf(b);\n  });\n  var firstBreakpoint = orderedSizes[0];\n  var minBreakpointSize = euiTheme.breakpoint[firstBreakpoint];\n  var lastBreakpoint = orderedSizes[sizes.length - 1];\n  var maxBreakpointSize;\n\n  // To get the correct screen range, we set the max-width to the next breakpoint\n  // size in the sizes array (unless the size is already the largest breakpoint)\n  if (lastBreakpoint !== orderedBreakpoints[orderedBreakpoints.length - 1]) {\n    var nextBreakpoint = orderedBreakpoints.indexOf(lastBreakpoint) + 1;\n    maxBreakpointSize = euiTheme.breakpoint[orderedBreakpoints[nextBreakpoint]];\n  }\n  return ['@media only screen', minBreakpointSize ? \"(min-width: \".concat(minBreakpointSize, \"px)\") : false,\n  // If 0, don't render a min-width\n  maxBreakpointSize ? \"(max-width: \".concat(maxBreakpointSize - 1, \"px)\") : false // If undefined, don't render a max-width\n  ].filter(Boolean).join(' and ');\n};\nexport var useEuiBreakpoint = function useEuiBreakpoint(sizes) {\n  var euiTheme = useEuiTheme();\n  return euiBreakpoint(euiTheme, sizes);\n};\n\n/**\n * Min/Max width breakpoint utilities that generate only a single min/max query/bound\n *\n * *Unlike the above euiBreakpoint utility*, these utilities treat breakpoint\n * sizes as a one-dimensional point, rather than a two-dimensional *screen range*.\n * Examples with default theme breakpoints:\n *\n * euiMaxBreakpoint('m') becomes `@media only screen and (max-width: 767px)`\n * euiMinBreakpoint('m') becomes `@media only screen and (min-width: 768px)`\n *\n * This is safer and more intentional to use than euiBreakpoint(['xs', 's']) / euiBreakpoint(['m', 'xl'])\n * in the event that consumers add larger or smaller custom breakpoints (e.g 'xxs' or `xxl`)\n * and if the intention of the media query is actually \"m and below/above\" vs. \"only screens m/l/xl\".\n */\n\nexport var euiMinBreakpoint = function euiMinBreakpoint(_ref2, size) {\n  var euiTheme = _ref2.euiTheme;\n  var minBreakpointSize = euiTheme.breakpoint[size];\n  if (minBreakpointSize) {\n    return \"@media only screen and (min-width: \".concat(minBreakpointSize, \"px)\");\n  } else {\n    console.warn(\"Invalid min breakpoint size: \".concat(size));\n    return '@media only screen';\n  }\n};\nexport var useEuiMinBreakpoint = function useEuiMinBreakpoint(size) {\n  var euiTheme = useEuiTheme();\n  return euiMinBreakpoint(euiTheme, size);\n};\nexport var euiMaxBreakpoint = function euiMaxBreakpoint(_ref3, size) {\n  var euiTheme = _ref3.euiTheme;\n  var maxBreakpointSize = euiTheme.breakpoint[size];\n  if (maxBreakpointSize) {\n    return \"@media only screen and (max-width: \".concat(maxBreakpointSize - 1, \"px)\");\n  } else {\n    console.warn(\"Invalid max breakpoint size: \".concat(size));\n    return '@media only screen';\n  }\n};\nexport var useEuiMaxBreakpoint = function useEuiMaxBreakpoint(size) {\n  var euiTheme = useEuiTheme();\n  return euiMaxBreakpoint(euiTheme, size);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}