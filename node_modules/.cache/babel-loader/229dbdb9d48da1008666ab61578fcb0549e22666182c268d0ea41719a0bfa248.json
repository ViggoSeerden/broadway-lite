{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { printIso8601 } from './date_format';\nimport { isDateValue } from './date_value';\nimport { AST, Operator } from './ast';\nimport { isArray, isDateLike, isString, isBoolean, isNumber } from '../../../services/predicate';\nvar emitMatch = function emitMatch(match) {\n  if (!match) {\n    return '';\n  }\n  return AST.Match.isMust(match) ? '+' : '-';\n};\nvar escapeValue = function escapeValue(value) {\n  if (typeof value === 'string') {\n    return value.replace(/([\\\\\"])/g, '\\\\$1');\n  }\n  return value;\n};\nvar emitFieldDateLikeClause = function emitFieldDateLikeClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(printIso8601(value));\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(printIso8601(value));\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(printIso8601(value));\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(printIso8601(value));\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(printIso8601(value));\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\nvar emitFieldDateValueClause = function emitFieldDateValueClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  var granularity = value.granularity,\n    resolve = value.resolve;\n  var date = resolve();\n  if (granularity) {\n    switch (operator) {\n      case Operator.EQ:\n        var gte = granularity.iso8601(granularity.start(date));\n        var lt = granularity.iso8601(granularity.startOfNext(date));\n        return \"\".concat(matchOp).concat(field, \":(>=\").concat(gte, \" AND <\").concat(lt, \")\");\n      case Operator.GT:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.startOfNext(date)));\n      case Operator.GTE:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.start(date)));\n      case Operator.LT:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.start(date)));\n      case Operator.LTE:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.startOfNext(date)));\n      default:\n        throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n    }\n  }\n  return emitFieldDateLikeClause(field, date, operator, match);\n};\nvar emitFieldNumericClause = function emitFieldNumericClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(value);\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(value);\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(value);\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(value);\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(value);\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\nvar emitFieldStringClause = function emitFieldStringClause(field, value, match) {\n  var matchOp = emitMatch(match);\n  if (value.match(/\\s/)) {\n    return \"\".concat(matchOp).concat(field, \":\\\"\").concat(escapeValue(value), \"\\\"\");\n  }\n  return \"\".concat(matchOp).concat(field, \":\").concat(escapeValue(value));\n};\nvar emitFieldBooleanClause = function emitFieldBooleanClause(field, value, match) {\n  var matchOp = emitMatch(match);\n  return \"\".concat(matchOp).concat(field, \":\").concat(value);\n};\nvar emitFieldSingleValueClause = function emitFieldSingleValueClause(field, value, operator, match) {\n  if (isDateValue(value)) {\n    return emitFieldDateValueClause(field, value, operator, match);\n  }\n  if (isDateLike(value)) {\n    return emitFieldDateLikeClause(field, value, operator, match);\n  }\n  if (isString(value)) {\n    return emitFieldStringClause(field, value, match);\n  }\n  if (isNumber(value)) {\n    return emitFieldNumericClause(field, value, operator, match);\n  }\n  if (isBoolean(value)) {\n    return emitFieldBooleanClause(field, value, match);\n  }\n  throw new Error(\"unknown type of field value [\".concat(value, \"]\"));\n};\nvar emitFieldClause = function emitFieldClause(clause, isGroupMember) {\n  var field = clause.field,\n    value = clause.value,\n    operator = clause.operator;\n  var match = clause.match;\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n  if (!isArray(value)) {\n    return emitFieldSingleValueClause(field, value, operator, match);\n  }\n  var matchOp = emitMatch(match);\n  var clauses = value.map(function (v) {\n    return emitFieldSingleValueClause(field, v, operator);\n  }).join(' OR ');\n  return \"\".concat(matchOp, \"(\").concat(clauses, \")\");\n};\nvar emitTermClause = function emitTermClause(clause, isGroupMember) {\n  var value = clause.value;\n  var match = clause.match;\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n  var matchOp = emitMatch(match);\n  if (isString(value) && value.match(/\\s/)) {\n    return \"\".concat(matchOp, \"\\\"\").concat(escapeValue(value), \"\\\"\");\n  }\n  return \"\".concat(matchOp).concat(escapeValue(value));\n};\nvar emitIsClause = function emitIsClause(clause, isGroupMember) {\n  var flag = clause.flag,\n    match = clause.match;\n  var matchOp = isGroupMember ? '' : '+';\n  var flagValue = AST.Match.isMust(match);\n  return \"\".concat(matchOp).concat(flag, \":\").concat(flagValue);\n};\nvar emitGroupClause = function emitGroupClause(clause) {\n  var value = clause.value;\n  var formattedValues = value.map(function (clause) {\n    return emitClause(clause, true);\n  });\n  return \"+(\".concat(formattedValues.join(' '), \")\");\n};\nfunction emitClause(clause) {\n  var isGroupMember = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (AST.Field.isInstance(clause)) {\n    return emitFieldClause(clause, isGroupMember);\n  }\n  if (AST.Term.isInstance(clause)) {\n    return emitTermClause(clause, isGroupMember);\n  }\n  if (AST.Is.isInstance(clause)) {\n    return emitIsClause(clause, isGroupMember);\n  }\n  if (AST.Group.isInstance(clause)) {\n    return emitGroupClause(clause);\n  }\n  throw new Error(\"unknown clause type [\".concat(JSON.stringify(clause), \"]\"));\n}\nexport var astToEsQueryString = function astToEsQueryString(ast) {\n  if (ast.clauses.length === 0) {\n    return '*';\n  }\n  return ast.clauses.map(function (clause) {\n    return emitClause(clause);\n  }).join(' ');\n};","map":{"version":3,"names":["printIso8601","isDateValue","AST","Operator","isArray","isDateLike","isString","isBoolean","isNumber","emitMatch","match","Match","isMust","escapeValue","value","replace","emitFieldDateLikeClause","field","operator","matchOp","EQ","concat","GT","GTE","LT","LTE","Error","emitFieldDateValueClause","granularity","resolve","date","gte","iso8601","start","lt","startOfNext","emitFieldNumericClause","emitFieldStringClause","emitFieldBooleanClause","emitFieldSingleValueClause","emitFieldClause","clause","isGroupMember","undefined","clauses","map","v","join","emitTermClause","emitIsClause","flag","flagValue","emitGroupClause","formattedValues","emitClause","arguments","length","Field","isInstance","Term","Is","Group","JSON","stringify","astToEsQueryString","ast"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/components/search_bar/query/ast_to_es_query_string.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { printIso8601 } from './date_format';\nimport { isDateValue } from './date_value';\nimport { AST, Operator } from './ast';\nimport { isArray, isDateLike, isString, isBoolean, isNumber } from '../../../services/predicate';\nvar emitMatch = function emitMatch(match) {\n  if (!match) {\n    return '';\n  }\n  return AST.Match.isMust(match) ? '+' : '-';\n};\nvar escapeValue = function escapeValue(value) {\n  if (typeof value === 'string') {\n    return value.replace(/([\\\\\"])/g, '\\\\$1');\n  }\n  return value;\n};\nvar emitFieldDateLikeClause = function emitFieldDateLikeClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(printIso8601(value));\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(printIso8601(value));\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(printIso8601(value));\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(printIso8601(value));\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(printIso8601(value));\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\nvar emitFieldDateValueClause = function emitFieldDateValueClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  var granularity = value.granularity,\n    resolve = value.resolve;\n  var date = resolve();\n  if (granularity) {\n    switch (operator) {\n      case Operator.EQ:\n        var gte = granularity.iso8601(granularity.start(date));\n        var lt = granularity.iso8601(granularity.startOfNext(date));\n        return \"\".concat(matchOp).concat(field, \":(>=\").concat(gte, \" AND <\").concat(lt, \")\");\n      case Operator.GT:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.startOfNext(date)));\n      case Operator.GTE:\n        return \"\".concat(matchOp).concat(field, \":>=\").concat(granularity.iso8601(granularity.start(date)));\n      case Operator.LT:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.start(date)));\n      case Operator.LTE:\n        return \"\".concat(matchOp).concat(field, \":<\").concat(granularity.iso8601(granularity.startOfNext(date)));\n      default:\n        throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n    }\n  }\n  return emitFieldDateLikeClause(field, date, operator, match);\n};\nvar emitFieldNumericClause = function emitFieldNumericClause(field, value, operator, match) {\n  var matchOp = emitMatch(match);\n  switch (operator) {\n    case Operator.EQ:\n      return \"\".concat(matchOp).concat(field, \":\").concat(value);\n    case Operator.GT:\n      return \"\".concat(matchOp).concat(field, \":>\").concat(value);\n    case Operator.GTE:\n      return \"\".concat(matchOp).concat(field, \":>=\").concat(value);\n    case Operator.LT:\n      return \"\".concat(matchOp).concat(field, \":<\").concat(value);\n    case Operator.LTE:\n      return \"\".concat(matchOp).concat(field, \":<=\").concat(value);\n    default:\n      throw new Error(\"unknown operator [\".concat(operator, \"]\"));\n  }\n};\nvar emitFieldStringClause = function emitFieldStringClause(field, value, match) {\n  var matchOp = emitMatch(match);\n  if (value.match(/\\s/)) {\n    return \"\".concat(matchOp).concat(field, \":\\\"\").concat(escapeValue(value), \"\\\"\");\n  }\n  return \"\".concat(matchOp).concat(field, \":\").concat(escapeValue(value));\n};\nvar emitFieldBooleanClause = function emitFieldBooleanClause(field, value, match) {\n  var matchOp = emitMatch(match);\n  return \"\".concat(matchOp).concat(field, \":\").concat(value);\n};\nvar emitFieldSingleValueClause = function emitFieldSingleValueClause(field, value, operator, match) {\n  if (isDateValue(value)) {\n    return emitFieldDateValueClause(field, value, operator, match);\n  }\n  if (isDateLike(value)) {\n    return emitFieldDateLikeClause(field, value, operator, match);\n  }\n  if (isString(value)) {\n    return emitFieldStringClause(field, value, match);\n  }\n  if (isNumber(value)) {\n    return emitFieldNumericClause(field, value, operator, match);\n  }\n  if (isBoolean(value)) {\n    return emitFieldBooleanClause(field, value, match);\n  }\n  throw new Error(\"unknown type of field value [\".concat(value, \"]\"));\n};\nvar emitFieldClause = function emitFieldClause(clause, isGroupMember) {\n  var field = clause.field,\n    value = clause.value,\n    operator = clause.operator;\n  var match = clause.match;\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n  if (!isArray(value)) {\n    return emitFieldSingleValueClause(field, value, operator, match);\n  }\n  var matchOp = emitMatch(match);\n  var clauses = value.map(function (v) {\n    return emitFieldSingleValueClause(field, v, operator);\n  }).join(' OR ');\n  return \"\".concat(matchOp, \"(\").concat(clauses, \")\");\n};\nvar emitTermClause = function emitTermClause(clause, isGroupMember) {\n  var value = clause.value;\n  var match = clause.match;\n  if (isGroupMember && AST.Match.isMust(match)) {\n    match = undefined;\n  }\n  var matchOp = emitMatch(match);\n  if (isString(value) && value.match(/\\s/)) {\n    return \"\".concat(matchOp, \"\\\"\").concat(escapeValue(value), \"\\\"\");\n  }\n  return \"\".concat(matchOp).concat(escapeValue(value));\n};\nvar emitIsClause = function emitIsClause(clause, isGroupMember) {\n  var flag = clause.flag,\n    match = clause.match;\n  var matchOp = isGroupMember ? '' : '+';\n  var flagValue = AST.Match.isMust(match);\n  return \"\".concat(matchOp).concat(flag, \":\").concat(flagValue);\n};\nvar emitGroupClause = function emitGroupClause(clause) {\n  var value = clause.value;\n  var formattedValues = value.map(function (clause) {\n    return emitClause(clause, true);\n  });\n  return \"+(\".concat(formattedValues.join(' '), \")\");\n};\nfunction emitClause(clause) {\n  var isGroupMember = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (AST.Field.isInstance(clause)) {\n    return emitFieldClause(clause, isGroupMember);\n  }\n  if (AST.Term.isInstance(clause)) {\n    return emitTermClause(clause, isGroupMember);\n  }\n  if (AST.Is.isInstance(clause)) {\n    return emitIsClause(clause, isGroupMember);\n  }\n  if (AST.Group.isInstance(clause)) {\n    return emitGroupClause(clause);\n  }\n  throw new Error(\"unknown clause type [\".concat(JSON.stringify(clause), \"]\"));\n}\nexport var astToEsQueryString = function astToEsQueryString(ast) {\n  if (ast.clauses.length === 0) {\n    return '*';\n  }\n  return ast.clauses.map(function (clause) {\n    return emitClause(clause);\n  }).join(' ');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}