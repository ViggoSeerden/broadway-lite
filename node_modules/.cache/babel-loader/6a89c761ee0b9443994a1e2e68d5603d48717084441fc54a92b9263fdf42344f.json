{"ast":null,"code":"'use strict';\n\nmodule.exports = breaks;\nvar visit = require('unist-util-visit');\nvar find = /[\\t ]*(?:\\r?\\n|\\r)/g;\nvar splice = [].splice;\nfunction breaks() {\n  return transform;\n}\nfunction transform(tree) {\n  visit(tree, 'text', ontext);\n}\nfunction ontext(node, index, parent) {\n  var result = [];\n  var start = 0;\n  var match;\n  var position;\n  find.lastIndex = 0;\n  match = find.exec(node.value);\n  while (match) {\n    position = match.index;\n    if (start !== position) {\n      result.push({\n        type: 'text',\n        value: node.value.slice(start, position)\n      });\n    }\n    result.push({\n      type: 'break'\n    });\n    start = position + match[0].length;\n    match = find.exec(node.value);\n  }\n  if (result.length > 0) {\n    if (start < node.value.length) {\n      result.push({\n        type: 'text',\n        value: node.value.slice(start)\n      });\n    }\n    splice.apply(parent.children, [index, 1].concat(result));\n    return index + result.length;\n  }\n}","map":{"version":3,"names":["module","exports","breaks","visit","require","find","splice","transform","tree","ontext","node","index","parent","result","start","match","position","lastIndex","exec","value","push","type","slice","length","apply","children","concat"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/remark-breaks/index.js"],"sourcesContent":["'use strict'\n\nmodule.exports = breaks\n\nvar visit = require('unist-util-visit')\n\nvar find = /[\\t ]*(?:\\r?\\n|\\r)/g\n\nvar splice = [].splice\n\nfunction breaks() {\n  return transform\n}\n\nfunction transform(tree) {\n  visit(tree, 'text', ontext)\n}\n\nfunction ontext(node, index, parent) {\n  var result = []\n  var start = 0\n  var match\n  var position\n\n  find.lastIndex = 0\n\n  match = find.exec(node.value)\n\n  while (match) {\n    position = match.index\n\n    if (start !== position) {\n      result.push({type: 'text', value: node.value.slice(start, position)})\n    }\n\n    result.push({type: 'break'})\n    start = position + match[0].length\n    match = find.exec(node.value)\n  }\n\n  if (result.length > 0) {\n    if (start < node.value.length) {\n      result.push({type: 'text', value: node.value.slice(start)})\n    }\n\n    splice.apply(parent.children, [index, 1].concat(result))\n    return index + result.length\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,MAAM;AAEvB,IAAIC,KAAK,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAEvC,IAAIC,IAAI,GAAG,qBAAqB;AAEhC,IAAIC,MAAM,GAAG,EAAE,CAACA,MAAM;AAEtB,SAASJ,MAAMA,CAAA,EAAG;EAChB,OAAOK,SAAS;AAClB;AAEA,SAASA,SAASA,CAACC,IAAI,EAAE;EACvBL,KAAK,CAACK,IAAI,EAAE,MAAM,EAAEC,MAAM,CAAC;AAC7B;AAEA,SAASA,MAAMA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACnC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK;EACT,IAAIC,QAAQ;EAEZX,IAAI,CAACY,SAAS,GAAG,CAAC;EAElBF,KAAK,GAAGV,IAAI,CAACa,IAAI,CAACR,IAAI,CAACS,KAAK,CAAC;EAE7B,OAAOJ,KAAK,EAAE;IACZC,QAAQ,GAAGD,KAAK,CAACJ,KAAK;IAEtB,IAAIG,KAAK,KAAKE,QAAQ,EAAE;MACtBH,MAAM,CAACO,IAAI,CAAC;QAACC,IAAI,EAAE,MAAM;QAAEF,KAAK,EAAET,IAAI,CAACS,KAAK,CAACG,KAAK,CAACR,KAAK,EAAEE,QAAQ;MAAC,CAAC,CAAC;IACvE;IAEAH,MAAM,CAACO,IAAI,CAAC;MAACC,IAAI,EAAE;IAAO,CAAC,CAAC;IAC5BP,KAAK,GAAGE,QAAQ,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACQ,MAAM;IAClCR,KAAK,GAAGV,IAAI,CAACa,IAAI,CAACR,IAAI,CAACS,KAAK,CAAC;EAC/B;EAEA,IAAIN,MAAM,CAACU,MAAM,GAAG,CAAC,EAAE;IACrB,IAAIT,KAAK,GAAGJ,IAAI,CAACS,KAAK,CAACI,MAAM,EAAE;MAC7BV,MAAM,CAACO,IAAI,CAAC;QAACC,IAAI,EAAE,MAAM;QAAEF,KAAK,EAAET,IAAI,CAACS,KAAK,CAACG,KAAK,CAACR,KAAK;MAAC,CAAC,CAAC;IAC7D;IAEAR,MAAM,CAACkB,KAAK,CAACZ,MAAM,CAACa,QAAQ,EAAE,CAACd,KAAK,EAAE,CAAC,CAAC,CAACe,MAAM,CAACb,MAAM,CAAC,CAAC;IACxD,OAAOF,KAAK,GAAGE,MAAM,CAACU,MAAM;EAC9B;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}