{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport React from 'react';\nimport { IsFilter } from './is_filter';\nimport { FieldValueSelectionFilter } from './field_value_selection_filter';\nimport { FieldValueToggleFilter } from './field_value_toggle_filter';\nimport { FieldValueToggleGroupFilter } from './field_value_toggle_group_filter';\nimport { CustomComponentFilter } from './custom_component_filter';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport var createFilter = function createFilter(index, config, query, onChange) {\n  var props = {\n    index: index,\n    query: query,\n    onChange: onChange\n  };\n\n  // We don't put `config` into `props` above because until we check\n  // `config.type`, TS only knows that it's a `FilterConfig`, and that type\n  // is used to define `props` as well. Once we've checked `config.type`\n  // below, its type is narrowed correctly, hence we pass down `config`\n  // separately.\n  switch (config.type) {\n    case 'is':\n      return ___EmotionJSX(IsFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'field_value_selection':\n      return ___EmotionJSX(FieldValueSelectionFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'field_value_toggle':\n      return ___EmotionJSX(FieldValueToggleFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'field_value_toggle_group':\n      return ___EmotionJSX(FieldValueToggleGroupFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'custom_component':\n      return ___EmotionJSX(CustomComponentFilter, _extends({}, props, {\n        config: config\n      }));\n    default:\n      // @ts-ignore TS knows that we've checked `config.type` exhaustively\n      throw new Error(\"Unknown search filter type [\".concat(config.type, \"]\"));\n  }\n};","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","IsFilter","FieldValueSelectionFilter","FieldValueToggleFilter","FieldValueToggleGroupFilter","CustomComponentFilter","jsx","___EmotionJSX","createFilter","index","config","query","onChange","props","type","Error","concat"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/components/search_bar/filters/filters.js"],"sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport React from 'react';\nimport { IsFilter } from './is_filter';\nimport { FieldValueSelectionFilter } from './field_value_selection_filter';\nimport { FieldValueToggleFilter } from './field_value_toggle_filter';\nimport { FieldValueToggleGroupFilter } from './field_value_toggle_group_filter';\nimport { CustomComponentFilter } from './custom_component_filter';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport var createFilter = function createFilter(index, config, query, onChange) {\n  var props = {\n    index: index,\n    query: query,\n    onChange: onChange\n  };\n\n  // We don't put `config` into `props` above because until we check\n  // `config.type`, TS only knows that it's a `FilterConfig`, and that type\n  // is used to define `props` as well. Once we've checked `config.type`\n  // below, its type is narrowed correctly, hence we pass down `config`\n  // separately.\n  switch (config.type) {\n    case 'is':\n      return ___EmotionJSX(IsFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'field_value_selection':\n      return ___EmotionJSX(FieldValueSelectionFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'field_value_toggle':\n      return ___EmotionJSX(FieldValueToggleFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'field_value_toggle_group':\n      return ___EmotionJSX(FieldValueToggleGroupFilter, _extends({}, props, {\n        config: config\n      }));\n    case 'custom_component':\n      return ___EmotionJSX(CustomComponentFilter, _extends({}, props, {\n        config: config\n      }));\n    default:\n      // @ts-ignore TS knows that we've checked `config.type` exhaustively\n      throw new Error(\"Unknown search filter type [\".concat(config.type, \"]\"));\n  }\n};"],"mappings":"AAAA,SAASA,QAAQA,CAAA,EAAG;EAAEA,QAAQ,GAAGC,MAAM,CAACC,MAAM,GAAGD,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,GAAG,UAAUC,MAAM,EAAE;IAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAAE,IAAIG,MAAM,GAAGF,SAAS,CAACD,CAAC,CAAC;MAAE,KAAK,IAAII,GAAG,IAAID,MAAM,EAAE;QAAE,IAAIP,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,MAAM,EAAEC,GAAG,CAAC,EAAE;UAAEL,MAAM,CAACK,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;QAAE;MAAE;IAAE;IAAE,OAAOL,MAAM;EAAE,CAAC;EAAE,OAAOJ,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEP,SAAS,CAAC;AAAE;AAClV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOQ,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,yBAAyB,QAAQ,gCAAgC;AAC1E,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,2BAA2B,QAAQ,mCAAmC;AAC/E,SAASC,qBAAqB,QAAQ,2BAA2B;AACjE,SAASC,GAAG,IAAIC,aAAa,QAAQ,gBAAgB;AACrD,OAAO,IAAIC,YAAY,GAAG,SAASA,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC9E,IAAIC,KAAK,GAAG;IACVJ,KAAK,EAAEA,KAAK;IACZE,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACZ,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA,QAAQF,MAAM,CAACI,IAAI;IACjB,KAAK,IAAI;MACP,OAAOP,aAAa,CAACN,QAAQ,EAAEf,QAAQ,CAAC,CAAC,CAAC,EAAE2B,KAAK,EAAE;QACjDH,MAAM,EAAEA;MACV,CAAC,CAAC,CAAC;IACL,KAAK,uBAAuB;MAC1B,OAAOH,aAAa,CAACL,yBAAyB,EAAEhB,QAAQ,CAAC,CAAC,CAAC,EAAE2B,KAAK,EAAE;QAClEH,MAAM,EAAEA;MACV,CAAC,CAAC,CAAC;IACL,KAAK,oBAAoB;MACvB,OAAOH,aAAa,CAACJ,sBAAsB,EAAEjB,QAAQ,CAAC,CAAC,CAAC,EAAE2B,KAAK,EAAE;QAC/DH,MAAM,EAAEA;MACV,CAAC,CAAC,CAAC;IACL,KAAK,0BAA0B;MAC7B,OAAOH,aAAa,CAACH,2BAA2B,EAAElB,QAAQ,CAAC,CAAC,CAAC,EAAE2B,KAAK,EAAE;QACpEH,MAAM,EAAEA;MACV,CAAC,CAAC,CAAC;IACL,KAAK,kBAAkB;MACrB,OAAOH,aAAa,CAACF,qBAAqB,EAAEnB,QAAQ,CAAC,CAAC,CAAC,EAAE2B,KAAK,EAAE;QAC9DH,MAAM,EAAEA;MACV,CAAC,CAAC,CAAC;IACL;MACE;MACA,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAACC,MAAM,CAACN,MAAM,CAACI,IAAI,EAAE,GAAG,CAAC,CAAC;EAC5E;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}