{"ast":null,"code":"/* eslint-disable no-restricted-globals */const offlinePage='offline.html';/* eslint-disable */const selfManifest=self.__WB_MANIFEST;/* eslint-enable */const cacheName=\"broadwayCache\";//Just take into account that the \"files\" below are request-url's and not filenames perse. So for your root of your website yous should include \"./\" and if you use my site (or another plain HTML-site) also \"index.html\". If you use a server-side language and have friendly url's that could be something like \"news/this-is-a-newsarticle/\".\nconst appFiles=[\"manifest.json\",\"index.html\",\"./\",\"logo192.png\",\"logo512.png\",\"favicon.ico\",\"logo2.png\",\"offline.html\"];/* eslint-disable no-restricted-globals */self.addEventListener(\"install\",installing=>{installing.waitUntil(caches.open(cacheName).then(cache=>{return cache.addAll(appFiles).catch(error=>{console.error('Failed to cache files:',error);});}));});/* eslint-disable no-restricted-globals */self.addEventListener(\"activate\",()=>{});/* eslint-disable no-restricted-globals */self.addEventListener(\"fetch\",fetching=>{fetching.respondWith(caches.match(fetching.request).then(response=>{return response||fetch(fetching.request).catch(()=>{return caches.match(offlinePage);});}));});","map":{"version":3,"names":["offlinePage","selfManifest","self","__WB_MANIFEST","cacheName","appFiles","addEventListener","installing","waitUntil","caches","open","then","cache","addAll","catch","error","console","fetching","respondWith","match","request","response","fetch"],"sources":["/home/runner/work/broadway-lite/broadway-lite/src/service-worker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\nconst offlinePage = 'offline.html';\n/* eslint-disable */\nconst selfManifest = self.__WB_MANIFEST;\n/* eslint-enable */\nconst cacheName = \"broadwayCache\";\n//Just take into account that the \"files\" below are request-url's and not filenames perse. So for your root of your website yous should include \"./\" and if you use my site (or another plain HTML-site) also \"index.html\". If you use a server-side language and have friendly url's that could be something like \"news/this-is-a-newsarticle/\".\nconst appFiles = [\n  \"manifest.json\",\n  \"index.html\",\n  \"./\",\n  \"logo192.png\",\n  \"logo512.png\",\n  \"favicon.ico\",\n  \"logo2.png\",\n  \"offline.html\"\n];\n\n/* eslint-disable no-restricted-globals */\nself.addEventListener(\"install\", (installing) => {\n  installing.waitUntil(\n    caches.open(cacheName).then((cache) => {\n      return cache.addAll(appFiles).catch(error => {\n        console.error('Failed to cache files:', error);\n      });\n    })\n  );\n});\n\n/* eslint-disable no-restricted-globals */\nself.addEventListener(\"activate\", () => {\n});\n\n/* eslint-disable no-restricted-globals */\nself.addEventListener(\"fetch\", (fetching) => {\n  fetching.respondWith(\n      caches.match(fetching.request).then((response) => {\n        return response || fetch(fetching.request).catch(() => {\n          return caches.match(offlinePage);\n        });\n      })\n  );\n});"],"mappings":"AAAA,0CACA,KAAM,CAAAA,WAAW,CAAG,cAAc,CAClC,oBACA,KAAM,CAAAC,YAAY,CAAGC,IAAI,CAACC,aAAa,CACvC,mBACA,KAAM,CAAAC,SAAS,CAAG,eAAe,CACjC;AACA,KAAM,CAAAC,QAAQ,CAAG,CACf,eAAe,CACf,YAAY,CACZ,IAAI,CACJ,aAAa,CACb,aAAa,CACb,aAAa,CACb,WAAW,CACX,cAAc,CACf,CAED,0CACAH,IAAI,CAACI,gBAAgB,CAAC,SAAS,CAAGC,UAAU,EAAK,CAC/CA,UAAU,CAACC,SAAS,CAClBC,MAAM,CAACC,IAAI,CAACN,SAAS,CAAC,CAACO,IAAI,CAAEC,KAAK,EAAK,CACrC,MAAO,CAAAA,KAAK,CAACC,MAAM,CAACR,QAAQ,CAAC,CAACS,KAAK,CAACC,KAAK,EAAI,CAC3CC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CAAC,CAAC,CACJ,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CAEF,0CACAb,IAAI,CAACI,gBAAgB,CAAC,UAAU,CAAE,IAAM,CACxC,CAAC,CAAC,CAEF,0CACAJ,IAAI,CAACI,gBAAgB,CAAC,OAAO,CAAGW,QAAQ,EAAK,CAC3CA,QAAQ,CAACC,WAAW,CAChBT,MAAM,CAACU,KAAK,CAACF,QAAQ,CAACG,OAAO,CAAC,CAACT,IAAI,CAAEU,QAAQ,EAAK,CAChD,MAAO,CAAAA,QAAQ,EAAIC,KAAK,CAACL,QAAQ,CAACG,OAAO,CAAC,CAACN,KAAK,CAAC,IAAM,CACrD,MAAO,CAAAL,MAAM,CAACU,KAAK,CAACnB,WAAW,CAAC,CAClC,CAAC,CAAC,CACJ,CAAC,CACL,CAAC,CACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}