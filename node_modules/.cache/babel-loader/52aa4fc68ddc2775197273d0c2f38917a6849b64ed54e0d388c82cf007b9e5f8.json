{"ast":null,"code":"/**\n * This library was modified by Harrison Liddiard. The source code to this\n * modified version can be found at https://github.com/liddiard/google-diff/.\n * The original source code can be found at\n * http://code.google.com/p/google-diff-match-patch/. This unofficial fork is\n * not maintained by or affiliated with Google Inc. The original attribution\n * and licensing information follows.\n */\n\n/**\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff.\n * @constructor\n */\nfunction diff(options) {\n  var options = options || {};\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Timeout = options.timeout || 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.EditCost = options.editCost || 4;\n}\n\n//  DIFF FUNCTIONS\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff.Diff;\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n */\ndiff.prototype.main = function (text1, text2, opt_checklines, opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = new Date().getTime() + this.Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.cleanupMerge(diffs);\n  return diffs;\n};\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.compute_ = function (text1, text2, checklines, deadline) {\n  var diffs;\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.lineMode_(text1, text2, deadline);\n  }\n  return this.bisect_(text1, text2, deadline);\n};\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.lineMode_ = function (text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n  var diffs = this.main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop(); // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.bisect_ = function (text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 != 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if (new Date().getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.bisectSplit_ = function (text1, text2, x, y, deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.main(text1a, text2a, false, deadline);\n  var diffsb = this.main(text1b, text2b, false, deadline);\n  return diffs.concat(diffsb);\n};\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff.prototype.linesToChars_ = function (text1, text2) {\n  var lineArray = []; // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {}; // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {\n    chars1: chars1,\n    chars2: chars2,\n    lineArray: lineArray\n  };\n};\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff.prototype.charsToLines_ = function (diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff.prototype.commonPrefix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff.prototype.commonSuffix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff.prototype.commonOverlap_ = function (text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff.prototype.halfMatch_ = function (text1, text2) {\n  if (this.Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = dmp.commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupSemantic = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && lastequality.length <= Math.max(length_insertions1, length_deletions1) && lastequality.length <= Math.max(length_insertions2, length_deletions2)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n  this.cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupSemanticLossless = function (diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 && char1.match(diff.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 && char2.match(diff.whitespaceRegex_);\n    var lineBreak1 = whitespace1 && char1.match(diff.linebreakRegex_);\n    var lineBreak2 = whitespace2 && char2.match(diff.linebreakRegex_);\n    var blankLine1 = lineBreak1 && one.match(diff.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 && two.match(diff.blanklineStartRegex_);\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff.whitespaceRegex_ = /\\s/;\ndiff.linebreakRegex_ = /[\\r\\n]/;\ndiff.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupEfficiency = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      if (diffs[pointer][1].length < this.EditCost && (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && (pre_ins && pre_del && post_ins && post_del || lastequality.length < this.EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--; // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--; // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n};\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupMerge = function (diffs) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n};\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff.prototype.xIndex = function (diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff.prototype.prettyHtml = function (diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_br = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0]; // Operation (insert, delete, equal)\n    var data = diffs[x][1]; // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;').replace(pattern_gt, '&gt;').replace(pattern_br, '<br/>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins>' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del>' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff.prototype.text1 = function (diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff.prototype.text2 = function (diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff.prototype.levenshtein = function (diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff.prototype.toDelta = function (diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff.prototype.fromDelta = function (text1, delta) {\n  var diffs = [];\n  var diffsLength = 0; // Keeping our own length var is faster in JS.\n  var pointer = 0; // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n      // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' + tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer + ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n// Export these global variables so that they survive Google's JS compiler.\n// In a browser, 'this' will be 'window'.\n// Users of node.js should 'require' the uncompressed version since Google's\n// JS compiler may break the following exports for non-browser environments.\nthis['diff'] = diff;\nthis['DIFF_DELETE'] = DIFF_DELETE;\nthis['DIFF_INSERT'] = DIFF_INSERT;\nthis['DIFF_EQUAL'] = DIFF_EQUAL;\nmodule.exports = diff;","map":{"version":3,"names":["diff","options","Timeout","timeout","EditCost","editCost","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","prototype","main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","commonPrefix","commonprefix","substring","commonSuffix","commonsuffix","length","diffs","compute_","unshift","push","cleanupMerge","longtext","shorttext","i","indexOf","hm","halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","lineMode_","bisect_","a","linesToChars_","chars1","chars2","linearray","lineArray","charsToLines_","cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","text","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","xIndex","loc","last_chars1","last_chars2","prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_br","op","data","replace","levenshtein","insertions","deletions","toDelta","encodeURI","fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","module","exports"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/text-diff/diff.js"],"sourcesContent":["/**\n * This library was modified by Harrison Liddiard. The source code to this\n * modified version can be found at https://github.com/liddiard/google-diff/.\n * The original source code can be found at\n * http://code.google.com/p/google-diff-match-patch/. This unofficial fork is\n * not maintained by or affiliated with Google Inc. The original attribution\n * and licensing information follows.\n */\n\n/**\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff.\n * @constructor\n */\nfunction diff(options) {\n  var options = options || {};\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Timeout = options.timeout || 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.EditCost = options.editCost || 4;\n}\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff.Diff;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n */\ndiff.prototype.main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.lineMode_(text1, text2, deadline);\n  }\n\n  return this.bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\ndiff.prototype.bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.main(text1a, text2a, false, deadline);\n  var diffsb = this.main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff.prototype.linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff.prototype.charsToLines_ = function(diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff.prototype.commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff.prototype.commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff.prototype.commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff.prototype.halfMatch_ = function(text1, text2) {\n  if (this.Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.commonPrefix(longtext.substring(i),\n                                          shorttext.substring(j));\n      var suffixLength = dmp.commonSuffix(longtext.substring(0, i),\n                                          shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && (lastequality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastequality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n  this.cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff.whitespaceRegex_ = /\\s/;\ndiff.linebreakRegex_ = /[\\r\\n]/;\ndiff.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastequality.length < this.EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\ndiff.prototype.cleanupMerge = function(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff.prototype.xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff.prototype.prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_br = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_br, '<br/>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins>' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del>' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff.prototype.text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff.prototype.text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff.prototype.levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff.prototype.toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff.prototype.fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n// Export these global variables so that they survive Google's JS compiler.\n// In a browser, 'this' will be 'window'.\n// Users of node.js should 'require' the uncompressed version since Google's\n// JS compiler may break the following exports for non-browser environments.\nthis['diff'] = diff;\nthis['DIFF_DELETE'] = DIFF_DELETE;\nthis['DIFF_INSERT'] = DIFF_INSERT;\nthis['DIFF_EQUAL'] = DIFF_EQUAL;\n\nmodule.exports = diff;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}