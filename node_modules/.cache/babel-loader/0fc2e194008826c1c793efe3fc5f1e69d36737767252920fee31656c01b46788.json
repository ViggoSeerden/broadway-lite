{"ast":null,"code":"const visit = require('unist-util-visit');\nconst emoji = require('node-emoji');\nconst emoticon = require('emoticon');\nconst RE_EMOJI = /:\\+1:|:-1:|:[\\w-]+:/g;\nconst RE_SHORT = /[$@|*'\",;.=:\\-)([\\]\\\\/<>038BOopPsSdDxXzZ]{2,5}/g;\nconst DEFAULT_SETTINGS = {\n  padSpaceAfter: false,\n  emoticon: false\n};\nfunction plugin(options) {\n  const settings = Object.assign({}, DEFAULT_SETTINGS, options);\n  const pad = !!settings.padSpaceAfter;\n  const emoticonEnable = !!settings.emoticon;\n  function getEmojiByShortCode(match) {\n    // find emoji by shortcode - full match or with-out last char as it could be from text e.g. :-),\n    const iconFull = emoticon.find(e => e.emoticons.includes(match)); // full match\n    const iconPart = emoticon.find(e => e.emoticons.includes(match.slice(0, -1))); // second search pattern\n    const trimmedChar = iconPart ? match.slice(-1) : '';\n    const addPad = pad ? ' ' : '';\n    let icon = iconFull ? iconFull.emoji + addPad : iconPart && iconPart.emoji + addPad + trimmedChar;\n    return icon || match;\n  }\n  function getEmoji(match) {\n    const got = emoji.get(match);\n    if (pad && got !== match) {\n      return got + ' ';\n    }\n    return got;\n  }\n  function transformer(tree) {\n    visit(tree, 'text', function (node) {\n      node.value = node.value.replace(RE_EMOJI, getEmoji);\n      if (emoticonEnable) {\n        node.value = node.value.replace(RE_SHORT, getEmojiByShortCode);\n      }\n    });\n  }\n  return transformer;\n}\nmodule.exports = plugin;","map":{"version":3,"names":["visit","require","emoji","emoticon","RE_EMOJI","RE_SHORT","DEFAULT_SETTINGS","padSpaceAfter","plugin","options","settings","Object","assign","pad","emoticonEnable","getEmojiByShortCode","match","iconFull","find","e","emoticons","includes","iconPart","slice","trimmedChar","addPad","icon","getEmoji","got","get","transformer","tree","node","value","replace","module","exports"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/remark-emoji/index.js"],"sourcesContent":["const visit = require('unist-util-visit');\nconst emoji = require('node-emoji');\nconst emoticon = require('emoticon');\n\nconst RE_EMOJI = /:\\+1:|:-1:|:[\\w-]+:/g;\nconst RE_SHORT = /[$@|*'\",;.=:\\-)([\\]\\\\/<>038BOopPsSdDxXzZ]{2,5}/g;\n\nconst DEFAULT_SETTINGS = {\n    padSpaceAfter: false,\n    emoticon: false\n};\n\nfunction plugin(options) {\n    const settings = Object.assign({}, DEFAULT_SETTINGS, options);\n    const pad = !!settings.padSpaceAfter;\n    const emoticonEnable = !!settings.emoticon;\n\n    function getEmojiByShortCode(match) {\n        // find emoji by shortcode - full match or with-out last char as it could be from text e.g. :-),\n        const iconFull = emoticon.find(e => e.emoticons.includes(match)); // full match\n        const iconPart = emoticon.find(e => e.emoticons.includes(match.slice(0, -1))); // second search pattern\n        const trimmedChar = iconPart ? match.slice(-1): '';\n        const addPad = pad ? ' ': '';\n        let icon = iconFull ?\n            iconFull.emoji + addPad:\n            iconPart && (iconPart.emoji + addPad +  trimmedChar);\n        return icon || match;\n    }\n\n    function getEmoji(match) {\n        const got = emoji.get(match);\n        if (pad && got !== match) {\n            return got + ' ';\n        }\n        return got;\n    }\n\n    function transformer(tree) {\n        visit(tree, 'text', function(node) {\n            node.value = node.value.replace(RE_EMOJI, getEmoji);\n            if (emoticonEnable) {\n                node.value = node.value.replace(RE_SHORT, getEmojiByShortCode);\n            }\n        });\n    }\n\n    return transformer;\n}\n\nmodule.exports = plugin;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACzC,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnC,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AAEpC,MAAMG,QAAQ,GAAG,sBAAsB;AACvC,MAAMC,QAAQ,GAAG,iDAAiD;AAElE,MAAMC,gBAAgB,GAAG;EACrBC,aAAa,EAAE,KAAK;EACpBJ,QAAQ,EAAE;AACd,CAAC;AAED,SAASK,MAAMA,CAACC,OAAO,EAAE;EACrB,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,gBAAgB,EAAEG,OAAO,CAAC;EAC7D,MAAMI,GAAG,GAAG,CAAC,CAACH,QAAQ,CAACH,aAAa;EACpC,MAAMO,cAAc,GAAG,CAAC,CAACJ,QAAQ,CAACP,QAAQ;EAE1C,SAASY,mBAAmBA,CAACC,KAAK,EAAE;IAChC;IACA,MAAMC,QAAQ,GAAGd,QAAQ,CAACe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,CAACC,QAAQ,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;IAClE,MAAMM,QAAQ,GAAGnB,QAAQ,CAACe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,CAACC,QAAQ,CAACL,KAAK,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,MAAMC,WAAW,GAAGF,QAAQ,GAAGN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,GAAE,EAAE;IAClD,MAAME,MAAM,GAAGZ,GAAG,GAAG,GAAG,GAAE,EAAE;IAC5B,IAAIa,IAAI,GAAGT,QAAQ,GACfA,QAAQ,CAACf,KAAK,GAAGuB,MAAM,GACvBH,QAAQ,IAAKA,QAAQ,CAACpB,KAAK,GAAGuB,MAAM,GAAID,WAAY;IACxD,OAAOE,IAAI,IAAIV,KAAK;EACxB;EAEA,SAASW,QAAQA,CAACX,KAAK,EAAE;IACrB,MAAMY,GAAG,GAAG1B,KAAK,CAAC2B,GAAG,CAACb,KAAK,CAAC;IAC5B,IAAIH,GAAG,IAAIe,GAAG,KAAKZ,KAAK,EAAE;MACtB,OAAOY,GAAG,GAAG,GAAG;IACpB;IACA,OAAOA,GAAG;EACd;EAEA,SAASE,WAAWA,CAACC,IAAI,EAAE;IACvB/B,KAAK,CAAC+B,IAAI,EAAE,MAAM,EAAE,UAASC,IAAI,EAAE;MAC/BA,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC9B,QAAQ,EAAEuB,QAAQ,CAAC;MACnD,IAAIb,cAAc,EAAE;QAChBkB,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC7B,QAAQ,EAAEU,mBAAmB,CAAC;MAClE;IACJ,CAAC,CAAC;EACN;EAEA,OAAOe,WAAW;AACtB;AAEAK,MAAM,CAACC,OAAO,GAAG5B,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}