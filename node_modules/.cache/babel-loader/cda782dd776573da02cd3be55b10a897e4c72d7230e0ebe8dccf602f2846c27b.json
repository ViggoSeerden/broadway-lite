{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { isDateLike, isNumber } from '../../../services/predicate';\nimport { dateFormat as defaultDateFormat, dateGranularity } from './date_format';\n// ESLint doesn't realise that we can import Moment directly.\n// eslint-disable-next-line import/named\nimport moment from 'moment';\nexport var DATE_TYPE = 'date';\nexport var dateValuesEqual = function dateValuesEqual(v1, v2) {\n  return v1.raw === v2.raw && v1.granularity === v2.granularity && v1.text === v2.text;\n};\nexport var isDateValue = function isDateValue(value) {\n  return !!value && value.type === DATE_TYPE && !!value.raw && !!value.text && !!value.resolve;\n};\nexport var dateValue = function dateValue(raw, granularity) {\n  var dateFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDateFormat;\n  if (!raw) {\n    return undefined;\n  }\n  if (isDateLike(raw)) {\n    var _dateValue = {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: dateFormat.print(raw),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n    return _dateValue;\n  }\n  if (isNumber(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: raw.toString(),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n  }\n  var text = raw.toString();\n  return {\n    type: DATE_TYPE,\n    raw: raw,\n    granularity: granularity,\n    text: text,\n    resolve: function resolve() {\n      return dateFormat.parse(text);\n    }\n  };\n};\nexport var dateValueParser = function dateValueParser() {\n  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDateFormat;\n  return function (text) {\n    var parsed = format.parse(text);\n    return dateValue(text, dateGranularity(parsed), format);\n  };\n};","map":{"version":3,"names":["isDateLike","isNumber","dateFormat","defaultDateFormat","dateGranularity","moment","DATE_TYPE","dateValuesEqual","v1","v2","raw","granularity","text","isDateValue","value","type","resolve","dateValue","arguments","length","undefined","_dateValue","print","toString","parse","dateValueParser","format","parsed"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/components/search_bar/query/date_value.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { isDateLike, isNumber } from '../../../services/predicate';\nimport { dateFormat as defaultDateFormat, dateGranularity } from './date_format';\n// ESLint doesn't realise that we can import Moment directly.\n// eslint-disable-next-line import/named\nimport moment from 'moment';\nexport var DATE_TYPE = 'date';\nexport var dateValuesEqual = function dateValuesEqual(v1, v2) {\n  return v1.raw === v2.raw && v1.granularity === v2.granularity && v1.text === v2.text;\n};\nexport var isDateValue = function isDateValue(value) {\n  return !!value && value.type === DATE_TYPE && !!value.raw && !!value.text && !!value.resolve;\n};\nexport var dateValue = function dateValue(raw, granularity) {\n  var dateFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDateFormat;\n  if (!raw) {\n    return undefined;\n  }\n  if (isDateLike(raw)) {\n    var _dateValue = {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: dateFormat.print(raw),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n    return _dateValue;\n  }\n  if (isNumber(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: raw.toString(),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n  }\n  var text = raw.toString();\n  return {\n    type: DATE_TYPE,\n    raw: raw,\n    granularity: granularity,\n    text: text,\n    resolve: function resolve() {\n      return dateFormat.parse(text);\n    }\n  };\n};\nexport var dateValueParser = function dateValueParser() {\n  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDateFormat;\n  return function (text) {\n    var parsed = format.parse(text);\n    return dateValue(text, dateGranularity(parsed), format);\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}