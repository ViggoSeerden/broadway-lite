{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport chroma from 'chroma-js';\nexport var MID_COLOR_STOP = '#EBEFF5';\n\n/**\n * This function takes an array of colors and returns an array of interpolated\n * colors based on the number of steps/len needed for use in UI elements such as charts.\n * Derived from https://github.com/gka/palettes (Unlicensed)\n */\n\nexport function colorPalette(\n/**\n * The main color code or array of codes\n */\ncolors) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var diverging = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var categorical = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var hexStart = colors.slice();\n  var hexEnd = [];\n  var even = len % 2 === 0;\n  var numColorsLeft = diverging ? Math.ceil(len / 2) + (even ? 1 : 0) : len;\n  var numColorsRight = diverging ? Math.ceil(len / 2) + (even ? 1 : 0) : 0;\n\n  // If only a single color is provided prepend the mid-point color\n  if (hexStart.length === 1) {\n    hexStart.unshift(MID_COLOR_STOP);\n  }\n\n  // If diverging, split the start array and duplicate the mid color\n  if (diverging) {\n    // If there's no midpoint, create one\n    if (hexStart.length < 3) {\n      hexStart[2] = hexStart[1];\n      hexStart[1] = MID_COLOR_STOP;\n    }\n    var numColorsHalf = Math.ceil(hexStart.length / 2);\n    var colorsLeft = hexStart.filter(function (item, index) {\n      if (index < numColorsHalf) {\n        return true; // keep it\n      }\n    });\n    var colorsRight = hexStart.reverse().filter(function (item, index) {\n      if (index < numColorsHalf) {\n        return true; // keep it\n      }\n    }).reverse();\n    hexStart = colorsLeft;\n    hexEnd = colorsRight;\n  }\n  function createSteps(colors, steps) {\n    if (!colors.length) {\n      return colors;\n    }\n    if (!categorical) {\n      return chroma.bezier(colors).scale().correctLightness().colors(steps);\n    } else {\n      return chroma.scale(colors).colors(steps);\n    }\n  }\n  var stepsLeft = createSteps(hexStart, numColorsLeft);\n  var stepsRight = createSteps(hexEnd, numColorsRight);\n  return (even && diverging ? stepsLeft.slice(0, stepsLeft.length - 1) : stepsLeft).concat(stepsRight.slice(1));\n}","map":{"version":3,"names":["chroma","MID_COLOR_STOP","colorPalette","colors","len","arguments","length","undefined","diverging","categorical","hexStart","slice","hexEnd","even","numColorsLeft","Math","ceil","numColorsRight","unshift","numColorsHalf","colorsLeft","filter","item","index","colorsRight","reverse","createSteps","steps","bezier","scale","correctLightness","stepsLeft","stepsRight","concat"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/services/color/color_palette.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport chroma from 'chroma-js';\nexport var MID_COLOR_STOP = '#EBEFF5';\n\n/**\n * This function takes an array of colors and returns an array of interpolated\n * colors based on the number of steps/len needed for use in UI elements such as charts.\n * Derived from https://github.com/gka/palettes (Unlicensed)\n */\n\nexport function colorPalette(\n/**\n * The main color code or array of codes\n */\ncolors) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var diverging = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var categorical = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var hexStart = colors.slice();\n  var hexEnd = [];\n  var even = len % 2 === 0;\n  var numColorsLeft = diverging ? Math.ceil(len / 2) + (even ? 1 : 0) : len;\n  var numColorsRight = diverging ? Math.ceil(len / 2) + (even ? 1 : 0) : 0;\n\n  // If only a single color is provided prepend the mid-point color\n  if (hexStart.length === 1) {\n    hexStart.unshift(MID_COLOR_STOP);\n  }\n\n  // If diverging, split the start array and duplicate the mid color\n  if (diverging) {\n    // If there's no midpoint, create one\n    if (hexStart.length < 3) {\n      hexStart[2] = hexStart[1];\n      hexStart[1] = MID_COLOR_STOP;\n    }\n    var numColorsHalf = Math.ceil(hexStart.length / 2);\n    var colorsLeft = hexStart.filter(function (item, index) {\n      if (index < numColorsHalf) {\n        return true; // keep it\n      }\n    });\n\n    var colorsRight = hexStart.reverse().filter(function (item, index) {\n      if (index < numColorsHalf) {\n        return true; // keep it\n      }\n    }).reverse();\n    hexStart = colorsLeft;\n    hexEnd = colorsRight;\n  }\n  function createSteps(colors, steps) {\n    if (!colors.length) {\n      return colors;\n    }\n    if (!categorical) {\n      return chroma.bezier(colors).scale().correctLightness().colors(steps);\n    } else {\n      return chroma.scale(colors).colors(steps);\n    }\n  }\n  var stepsLeft = createSteps(hexStart, numColorsLeft);\n  var stepsRight = createSteps(hexEnd, numColorsRight);\n  return (even && diverging ? stepsLeft.slice(0, stepsLeft.length - 1) : stepsLeft).concat(stepsRight.slice(1));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}