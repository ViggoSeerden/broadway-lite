{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { logicalCSS } from './logicals';\n/**\n * Calculates the font-size value based on the provided scale key\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated font-size value\n */\n\nexport function euiFontSizeFromScale(scale, _ref) {\n  var base = _ref.base,\n    font = _ref.font;\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$unit = _ref2.unit,\n    unit = _ref2$unit === void 0 ? font.defaultUnits : _ref2$unit,\n    customScale = _ref2.customScale;\n  if (unit === 'em') {\n    return \"\".concat(font.scale[scale], \"em\");\n  }\n  var numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  var denominator = base * font.scale[font.body.scale];\n  return unit === 'px' ? \"\".concat(numerator, \"px\") : \"\".concat((numerator / denominator).toFixed(4), \"rem\");\n}\n\n/**\n * Calculates the line-height to the closest multiple of the baseline\n * EX: A proper line-height for text is 1.5 times the font-size.\n *     If our base font size (euiFontSize) is 16, and our baseline is 4. To ensure the\n *     text stays on the baseline, we pass a multiplier to calculate a line-height.\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated line-height value aligned to baseline\n */\n\nexport function euiLineHeightFromBaseline(scale, _ref3) {\n  var base = _ref3.base,\n    font = _ref3.font;\n  var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref4$unit = _ref4.unit,\n    unit = _ref4$unit === void 0 ? font.defaultUnits : _ref4$unit,\n    customScale = _ref4.customScale;\n  var baseline = font.baseline,\n    lineHeightMultiplier = font.lineHeightMultiplier;\n  var numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  var denominator = base * font.scale[font.body.scale];\n  var _lineHeightMultiplier = numerator <= base ? lineHeightMultiplier : lineHeightMultiplier * 0.833;\n  if (unit === 'em') {\n    // Even though the line-height via `em` cannot be determined against the pixel baseline grid;\n    // we will assume that typically larger scale font-sizes should have a shorter line-height;\n    return _lineHeightMultiplier.toFixed(4).toString();\n  }\n  var pixelValue = Math.floor(Math.round(numerator * _lineHeightMultiplier) / baseline) * baseline;\n  return unit === 'px' ? \"\".concat(pixelValue, \"px\") : \"\".concat((pixelValue / denominator).toFixed(4), \"rem\");\n}\n\n/**\n * Text weight shifting\n *\n * When changing the font-weight based on the state of the component,\n * this mixin will ensure that the sizing is dependent on the boldest\n * weight so it doesn't shift sibling content.\n */\nexport var euiTextShift = function euiTextShift() {\n  var fontWeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'bold';\n  var attribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'data-text';\n  var euiTheme = arguments.length > 2 ? arguments[2] : undefined;\n  return \"\\n  &::after {\\n    display: block;\\n    content: attr(\".concat(attribute, \");\\n    font-weight: \").concat(euiTheme.font.weight[fontWeight], \";\\n    \").concat(logicalCSS('height', 0), \"\\n    overflow: hidden;\\n    visibility: hidden;\\n  }\");\n};","map":{"version":3,"names":["logicalCSS","euiFontSizeFromScale","scale","_ref","base","font","_ref2","arguments","length","undefined","_ref2$unit","unit","defaultUnits","customScale","concat","numerator","denominator","body","toFixed","euiLineHeightFromBaseline","_ref3","_ref4","_ref4$unit","baseline","lineHeightMultiplier","_lineHeightMultiplier","toString","pixelValue","Math","floor","round","euiTextShift","fontWeight","attribute","euiTheme","weight"],"sources":["/home/runner/work/broadway-lite/broadway-lite/node_modules/@elastic/eui/es/global_styling/functions/typography.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { logicalCSS } from './logicals';\n/**\n * Calculates the font-size value based on the provided scale key\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated font-size value\n */\n\nexport function euiFontSizeFromScale(scale, _ref) {\n  var base = _ref.base,\n    font = _ref.font;\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$unit = _ref2.unit,\n    unit = _ref2$unit === void 0 ? font.defaultUnits : _ref2$unit,\n    customScale = _ref2.customScale;\n  if (unit === 'em') {\n    return \"\".concat(font.scale[scale], \"em\");\n  }\n  var numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  var denominator = base * font.scale[font.body.scale];\n  return unit === 'px' ? \"\".concat(numerator, \"px\") : \"\".concat((numerator / denominator).toFixed(4), \"rem\");\n}\n\n/**\n * Calculates the line-height to the closest multiple of the baseline\n * EX: A proper line-height for text is 1.5 times the font-size.\n *     If our base font size (euiFontSize) is 16, and our baseline is 4. To ensure the\n *     text stays on the baseline, we pass a multiplier to calculate a line-height.\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated line-height value aligned to baseline\n */\n\nexport function euiLineHeightFromBaseline(scale, _ref3) {\n  var base = _ref3.base,\n    font = _ref3.font;\n  var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref4$unit = _ref4.unit,\n    unit = _ref4$unit === void 0 ? font.defaultUnits : _ref4$unit,\n    customScale = _ref4.customScale;\n  var baseline = font.baseline,\n    lineHeightMultiplier = font.lineHeightMultiplier;\n  var numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  var denominator = base * font.scale[font.body.scale];\n  var _lineHeightMultiplier = numerator <= base ? lineHeightMultiplier : lineHeightMultiplier * 0.833;\n  if (unit === 'em') {\n    // Even though the line-height via `em` cannot be determined against the pixel baseline grid;\n    // we will assume that typically larger scale font-sizes should have a shorter line-height;\n    return _lineHeightMultiplier.toFixed(4).toString();\n  }\n  var pixelValue = Math.floor(Math.round(numerator * _lineHeightMultiplier) / baseline) * baseline;\n  return unit === 'px' ? \"\".concat(pixelValue, \"px\") : \"\".concat((pixelValue / denominator).toFixed(4), \"rem\");\n}\n\n/**\n * Text weight shifting\n *\n * When changing the font-weight based on the state of the component,\n * this mixin will ensure that the sizing is dependent on the boldest\n * weight so it doesn't shift sibling content.\n */\nexport var euiTextShift = function euiTextShift() {\n  var fontWeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'bold';\n  var attribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'data-text';\n  var euiTheme = arguments.length > 2 ? arguments[2] : undefined;\n  return \"\\n  &::after {\\n    display: block;\\n    content: attr(\".concat(attribute, \");\\n    font-weight: \").concat(euiTheme.font.weight[fontWeight], \";\\n    \").concat(logicalCSS('height', 0), \"\\n    overflow: hidden;\\n    visibility: hidden;\\n  }\");\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAoBA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAChD,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;IAClBC,IAAI,GAAGF,IAAI,CAACE,IAAI;EAClB,IAAIC,KAAK,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChFG,UAAU,GAAGJ,KAAK,CAACK,IAAI;IACvBA,IAAI,GAAGD,UAAU,KAAK,KAAK,CAAC,GAAGL,IAAI,CAACO,YAAY,GAAGF,UAAU;IAC7DG,WAAW,GAAGP,KAAK,CAACO,WAAW;EACjC,IAAIF,IAAI,KAAK,IAAI,EAAE;IACjB,OAAO,EAAE,CAACG,MAAM,CAACT,IAAI,CAACH,KAAK,CAACA,KAAK,CAAC,EAAE,IAAI,CAAC;EAC3C;EACA,IAAIa,SAAS,GAAGX,IAAI,GAAGC,IAAI,CAACH,KAAK,CAACA,KAAK,CAAC;EACxC,IAAIW,WAAW,EAAEE,SAAS,IAAIV,IAAI,CAACH,KAAK,CAACW,WAAW,CAAC;EACrD,IAAIG,WAAW,GAAGZ,IAAI,GAAGC,IAAI,CAACH,KAAK,CAACG,IAAI,CAACY,IAAI,CAACf,KAAK,CAAC;EACpD,OAAOS,IAAI,KAAK,IAAI,GAAG,EAAE,CAACG,MAAM,CAACC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,CAACD,MAAM,CAAC,CAACC,SAAS,GAAGC,WAAW,EAAEE,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;AAC5G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,yBAAyBA,CAACjB,KAAK,EAAEkB,KAAK,EAAE;EACtD,IAAIhB,IAAI,GAAGgB,KAAK,CAAChB,IAAI;IACnBC,IAAI,GAAGe,KAAK,CAACf,IAAI;EACnB,IAAIgB,KAAK,GAAGd,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChFe,UAAU,GAAGD,KAAK,CAACV,IAAI;IACvBA,IAAI,GAAGW,UAAU,KAAK,KAAK,CAAC,GAAGjB,IAAI,CAACO,YAAY,GAAGU,UAAU;IAC7DT,WAAW,GAAGQ,KAAK,CAACR,WAAW;EACjC,IAAIU,QAAQ,GAAGlB,IAAI,CAACkB,QAAQ;IAC1BC,oBAAoB,GAAGnB,IAAI,CAACmB,oBAAoB;EAClD,IAAIT,SAAS,GAAGX,IAAI,GAAGC,IAAI,CAACH,KAAK,CAACA,KAAK,CAAC;EACxC,IAAIW,WAAW,EAAEE,SAAS,IAAIV,IAAI,CAACH,KAAK,CAACW,WAAW,CAAC;EACrD,IAAIG,WAAW,GAAGZ,IAAI,GAAGC,IAAI,CAACH,KAAK,CAACG,IAAI,CAACY,IAAI,CAACf,KAAK,CAAC;EACpD,IAAIuB,qBAAqB,GAAGV,SAAS,IAAIX,IAAI,GAAGoB,oBAAoB,GAAGA,oBAAoB,GAAG,KAAK;EACnG,IAAIb,IAAI,KAAK,IAAI,EAAE;IACjB;IACA;IACA,OAAOc,qBAAqB,CAACP,OAAO,CAAC,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC;EACpD;EACA,IAAIC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,KAAK,CAACf,SAAS,GAAGU,qBAAqB,CAAC,GAAGF,QAAQ,CAAC,GAAGA,QAAQ;EAChG,OAAOZ,IAAI,KAAK,IAAI,GAAG,EAAE,CAACG,MAAM,CAACa,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,CAACb,MAAM,CAAC,CAACa,UAAU,GAAGX,WAAW,EAAEE,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;AAC9G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIa,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;EAChD,IAAIC,UAAU,GAAGzB,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM;EAC3F,IAAI0B,SAAS,GAAG1B,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,WAAW;EAC/F,IAAI2B,QAAQ,GAAG3B,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;EAC9D,OAAO,yDAAyD,CAACK,MAAM,CAACmB,SAAS,EAAE,uBAAuB,CAAC,CAACnB,MAAM,CAACoB,QAAQ,CAAC7B,IAAI,CAAC8B,MAAM,CAACH,UAAU,CAAC,EAAE,SAAS,CAAC,CAAClB,MAAM,CAACd,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,uDAAuD,CAAC;AAC1P,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}